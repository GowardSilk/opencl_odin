package cl;

import "core:c"
import "vendor:directx/d3d11"
import "vendor:directx/dxgi"
import win32 "core:sys/windows"

foreign import opencl "OpenCL.lib"

/* =========================================
*               cl_ext.h
* ========================================= */

KHR_Command_Buffer :: 1
KHR_COMMAND_BUFFER_EXTENSION_NAME :: "cl_khr_command_buffer"
KHR_COMMAND_BUFFER_EXTENSION_VERSION := MAKE_VERSION(0, 9, 5)
DEVICE_COMMAND_BUFFER_CAPABILITIES_KHR :: 0x12A9
DEVICE_COMMAND_BUFFER_REQUIRED_QUEUE_PROPERTIES_KHR :: 0x12AA
COMMAND_BUFFER_CAPABILITY_KERNEL_PRINTF_KHR :: (1 << 0)
COMMAND_BUFFER_CAPABILITY_DEVICE_SIDE_ENQUEUE_KHR :: (1 << 1)
COMMAND_BUFFER_CAPABILITY_SIMULTANEOUS_USE_KHR :: (1 << 2)
COMMAND_BUFFER_CAPABILITY_OUT_OF_ORDER_KHR :: (1 << 3)
COMMAND_BUFFER_FLAGS_KHR :: 0x1293
COMMAND_BUFFER_SIMULTANEOUS_USE_KHR :: (1 << 0)
INVALID_COMMAND_BUFFER_KHR :: -1138
INVALID_SYNC_POINT_WAIT_LIST_KHR :: -1139
INCOMPATIBLE_COMMAND_QUEUE_KHR :: -1140
COMMAND_BUFFER_QUEUES_KHR :: 0x1294
COMMAND_BUFFER_NUM_QUEUES_KHR :: 0x1295
COMMAND_BUFFER_REFERENCE_COUNT_KHR :: 0x1296
COMMAND_BUFFER_STATE_KHR :: 0x1297
COMMAND_BUFFER_PROPERTIES_ARRAY_KHR :: 0x1298
COMMAND_BUFFER_CONTEXT_KHR :: 0x1299
COMMAND_BUFFER_STATE_RECORDING_KHR :: 0
COMMAND_BUFFER_STATE_EXECUTABLE_KHR :: 1
COMMAND_BUFFER_STATE_PENDING_KHR :: 2
COMMAND_COMMAND_BUFFER_KHR :: 0x12A8
KHR_Command_Buffer_Multi_Device :: 1
KHR_COMMAND_BUFFER_MULTI_DEVICE_EXTENSION_NAME :: "cl_khr_command_buffer_multi_device"
KHR_COMMAND_BUFFER_MULTI_DEVICE_EXTENSION_VERSION := MAKE_VERSION(0, 9, 1)
PLATFORM_COMMAND_BUFFER_CAPABILITIES_KHR :: 0x0908
COMMAND_BUFFER_PLATFORM_UNIVERSAL_SYNC_KHR :: (1 << 0)
COMMAND_BUFFER_PLATFORM_REMAP_QUEUES_KHR :: (1 << 1)
COMMAND_BUFFER_PLATFORM_AUTOMATIC_REMAP_KHR :: (1 << 2)
DEVICE_COMMAND_BUFFER_NUM_SYNC_DEVICES_KHR :: 0x12AB
DEVICE_COMMAND_BUFFER_SYNC_DEVICES_KHR :: 0x12AC
COMMAND_BUFFER_CAPABILITY_MULTIPLE_QUEUE_KHR :: (1 << 4)
COMMAND_BUFFER_DEVICE_SIDE_SYNC_KHR :: (1 << 2)
KHR_Command_Buffer_Mutable_Dispatch :: 1
KHR_COMMAND_BUFFER_MUTABLE_DISPATCH_EXTENSION_NAME :: "cl_khr_command_buffer_mutable_dispatch"
KHR_COMMAND_BUFFER_MUTABLE_DISPATCH_EXTENSION_VERSION := MAKE_VERSION(0, 9, 3)
COMMAND_BUFFER_MUTABLE_KHR :: (1 << 1)
INVALID_MUTABLE_COMMAND_KHR :: -1141
DEVICE_MUTABLE_DISPATCH_CAPABILITIES_KHR :: 0x12B0
MUTABLE_DISPATCH_UPDATABLE_FIELDS_KHR :: 0x12B1
MUTABLE_DISPATCH_GLOBAL_OFFSET_KHR :: (1 << 0)
MUTABLE_DISPATCH_GLOBAL_SIZE_KHR :: (1 << 1)
MUTABLE_DISPATCH_LOCAL_SIZE_KHR :: (1 << 2)
MUTABLE_DISPATCH_ARGUMENTS_KHR :: (1 << 3)
MUTABLE_DISPATCH_EXEC_INFO_KHR :: (1 << 4)
MUTABLE_COMMAND_COMMAND_QUEUE_KHR :: 0x12A0
MUTABLE_COMMAND_COMMAND_BUFFER_KHR :: 0x12A1
MUTABLE_COMMAND_COMMAND_TYPE_KHR :: 0x12AD
MUTABLE_COMMAND_PROPERTIES_ARRAY_KHR :: 0x12A2
MUTABLE_DISPATCH_KERNEL_KHR :: 0x12A3
MUTABLE_DISPATCH_DIMENSIONS_KHR :: 0x12A4
MUTABLE_DISPATCH_GLOBAL_WORK_OFFSET_KHR :: 0x12A5
MUTABLE_DISPATCH_GLOBAL_WORK_SIZE_KHR :: 0x12A6
MUTABLE_DISPATCH_LOCAL_WORK_SIZE_KHR :: 0x12A7
STRUCTURE_TYPE_MUTABLE_DISPATCH_CONFIG_KHR :: 0
COMMAND_BUFFER_MUTABLE_DISPATCH_ASSERTS_KHR :: 0x12B7
MUTABLE_DISPATCH_ASSERTS_KHR :: 0x12B8
MUTABLE_DISPATCH_ASSERT_NO_ADDITIONAL_WORK_GROUPS_KHR :: (1 << 0)
KHR_Fp_6_4 :: 1
KHR_FP64_EXTENSION_NAME :: "cl_khr_fp64"
KHR_FP64_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Fp_1_6 :: 1
KHR_FP16_EXTENSION_NAME :: "cl_khr_fp16"
KHR_FP16_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_HALF_FP_CONFIG :: 0x1033
A_P_P_L_E__Set_Mem_Object_Destructor :: 1
APPLE_SETMEMOBJECTDESTRUCTOR_EXTENSION_NAME :: "cl_APPLE_SetMemObjectDestructor"
APPLE_SETMEMOBJECTDESTRUCTOR_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
A_P_P_L_E__Context_Logging_Functions :: 1
APPLE_CONTEXTLOGGINGFUNCTIONS_EXTENSION_NAME :: "cl_APPLE_ContextLoggingFunctions"
APPLE_CONTEXTLOGGINGFUNCTIONS_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
KHR_ICD :: 1
KHR_ICD_EXTENSION_NAME :: "cl_khr_icd"
KHR_ICD_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
PLATFORM_ICD_SUFFIX_KHR :: 0x0920
PLATFORM_NOT_FOUND_KHR :: -1001
KHR_IL_Program :: 1
KHR_IL_PROGRAM_EXTENSION_NAME :: "cl_khr_il_program"
KHR_IL_PROGRAM_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_IL_VERSION_KHR :: 0x105B
PROGRAM_IL_KHR :: 0x1169
KHR_Image2D_From_Buffer :: 1
KHR_IMAGE2D_FROM_BUFFER_EXTENSION_NAME :: "cl_khr_image2d_from_buffer"
KHR_IMAGE2D_FROM_BUFFER_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_IMAGE_PITCH_ALIGNMENT_KHR :: 0x104A
DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT_KHR :: 0x104B
KHR_Initialize_Memory :: 1
KHR_INITIALIZE_MEMORY_EXTENSION_NAME :: "cl_khr_initialize_memory"
KHR_INITIALIZE_MEMORY_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
CONTEXT_MEMORY_INITIALIZE_KHR :: 0x2030
CONTEXT_MEMORY_INITIALIZE_LOCAL_KHR :: (1 << 0)
CONTEXT_MEMORY_INITIALIZE_PRIVATE_KHR :: (1 << 1)
KHR_Terminate_Context :: 1
KHR_TERMINATE_CONTEXT_EXTENSION_NAME :: "cl_khr_terminate_context"
KHR_TERMINATE_CONTEXT_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_TERMINATE_CAPABILITY_KHR :: 0x2031
CONTEXT_TERMINATE_KHR :: 0x2032
DEVICE_TERMINATE_CAPABILITY_CONTEXT_KHR :: (1 << 0)
CONTEXT_TERMINATED_KHR :: -1121
KHR_Spir :: 1
KHR_SPIR_EXTENSION_NAME :: "cl_khr_spir"
KHR_SPIR_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_SPIR_VERSIONS :: 0x40E0
PROGRAM_BINARY_TYPE_INTERMEDIATE :: 0x40E1
KHR_Create_Command_Queue :: 1
KHR_CREATE_COMMAND_QUEUE_EXTENSION_NAME :: "cl_khr_create_command_queue"
KHR_CREATE_COMMAND_QUEUE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
NV_Device_Attribute_Query :: 1
NV_DEVICE_ATTRIBUTE_QUERY_EXTENSION_NAME :: "cl_nv_device_attribute_query"
NV_DEVICE_ATTRIBUTE_QUERY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_COMPUTE_CAPABILITY_MAJOR_NV :: 0x4000
DEVICE_COMPUTE_CAPABILITY_MINOR_NV :: 0x4001
DEVICE_REGISTERS_PER_BLOCK_NV :: 0x4002
DEVICE_WARP_SIZE_NV :: 0x4003
DEVICE_GPU_OVERLAP_NV :: 0x4004
DEVICE_KERNEL_EXEC_TIMEOUT_NV :: 0x4005
DEVICE_INTEGRATED_MEMORY_NV :: 0x4006
AMD_Device_Attribute_Query :: 1
AMD_DEVICE_ATTRIBUTE_QUERY_EXTENSION_NAME :: "cl_amd_device_attribute_query"
AMD_DEVICE_ATTRIBUTE_QUERY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_PROFILING_TIMER_OFFSET_AMD :: 0x4036
DEVICE_TOPOLOGY_AMD :: 0x4037
DEVICE_BOARD_NAME_AMD :: 0x4038
DEVICE_GLOBAL_FREE_MEMORY_AMD :: 0x4039
DEVICE_SIMD_PER_COMPUTE_UNIT_AMD :: 0x4040
DEVICE_SIMD_WIDTH_AMD :: 0x4041
DEVICE_SIMD_INSTRUCTION_WIDTH_AMD :: 0x4042
DEVICE_WAVEFRONT_WIDTH_AMD :: 0x4043
DEVICE_GLOBAL_MEM_CHANNELS_AMD :: 0x4044
DEVICE_GLOBAL_MEM_CHANNEL_BANKS_AMD :: 0x4045
DEVICE_GLOBAL_MEM_CHANNEL_BANK_WIDTH_AMD :: 0x4046
DEVICE_LOCAL_MEM_SIZE_PER_COMPUTE_UNIT_AMD :: 0x4047
DEVICE_LOCAL_MEM_BANKS_AMD :: 0x4048
DEVICE_THREAD_TRACE_SUPPORTED_AMD :: 0x4049
DEVICE_GFXIP_MAJOR_AMD :: 0x404A
DEVICE_GFXIP_MINOR_AMD :: 0x404B
DEVICE_AVAILABLE_ASYNC_QUEUES_AMD :: 0x404C
DEVICE_PREFERRED_WORK_GROUP_SIZE_AMD :: 0x4030
DEVICE_MAX_WORK_GROUP_SIZE_AMD :: 0x4031
DEVICE_PREFERRED_CONSTANT_BUFFER_SIZE_AMD :: 0x4033
DEVICE_PCIE_ID_AMD :: 0x4034
ARM_Printf :: 1
ARM_PRINTF_EXTENSION_NAME :: "cl_arm_printf"
ARM_PRINTF_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
PRINTF_CALLBACK_ARM :: 0x40B0
PRINTF_BUFFERSIZE_ARM :: 0x40B1
EXT_Device_Fission :: 1
EXT_DEVICE_FISSION_EXTENSION_NAME :: "cl_ext_device_fission"
EXT_DEVICE_FISSION_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_PARTITION_FAILED_EXT :: -1057
INVALID_PARTITION_COUNT_EXT :: -1058
INVALID_PARTITION_NAME_EXT :: -1059
DEVICE_PARENT_DEVICE_EXT :: 0x4054
DEVICE_PARTITION_TYPES_EXT :: 0x4055
DEVICE_AFFINITY_DOMAINS_EXT :: 0x4056
DEVICE_REFERENCE_COUNT_EXT :: 0x4057
DEVICE_PARTITION_STYLE_EXT :: 0x4058
DEVICE_PARTITION_EQUALLY_EXT :: 0x4050
DEVICE_PARTITION_BY_COUNTS_EXT :: 0x4051
DEVICE_PARTITION_BY_NAMES_EXT :: 0x4052
DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT :: 0x4053
AFFINITY_DOMAIN_L1_CACHE_EXT :: 0x1
AFFINITY_DOMAIN_L2_CACHE_EXT :: 0x2
AFFINITY_DOMAIN_L3_CACHE_EXT :: 0x3
AFFINITY_DOMAIN_L4_CACHE_EXT :: 0x4
AFFINITY_DOMAIN_NUMA_EXT :: 0x10
AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT :: 0x100
PROPERTIES_LIST_END_EXT :: (cast(Device_Partition_Property_EXT)0)
PARTITION_BY_COUNTS_LIST_END_EXT :: (cast(Device_Partition_Property_EXT)0)
PARTITION_BY_NAMES_LIST_END_EXT :: (~cast(Device_Partition_Property_EXT)0)
EXT_Migrate_Memobject :: 1
EXT_MIGRATE_MEMOBJECT_EXTENSION_NAME :: "cl_ext_migrate_memobject"
EXT_MIGRATE_MEMOBJECT_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
MIGRATE_MEM_OBJECT_HOST_EXT :: (1 << 0)
COMMAND_MIGRATE_MEM_OBJECT_EXT :: 0x4040
EXT_Cxx_For_Opencl :: 1
EXT_CXX_FOR_OPENCL_EXTENSION_NAME :: "cl_ext_cxx_for_opencl"
EXT_CXX_FOR_OPENCL_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_CXX_FOR_OPENCL_NUMERIC_VERSION_EXT :: 0x4230
Qcom_EXT_Host_Ptr :: 1
QCOM_EXT_HOST_PTR_EXTENSION_NAME :: "cl_qcom_ext_host_ptr"
QCOM_EXT_HOST_PTR_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_EXT_HOST_PTR_QCOM :: (1 << 29)
DEVICE_EXT_MEM_PADDING_IN_BYTES_QCOM :: 0x40A0
DEVICE_PAGE_SIZE_QCOM :: 0x40A1
IMAGE_ROW_ALIGNMENT_QCOM :: 0x40A2
IMAGE_SLICE_ALIGNMENT_QCOM :: 0x40A3
MEM_HOST_UNCACHED_QCOM :: 0x40A4
MEM_HOST_WRITEBACK_QCOM :: 0x40A5
MEM_HOST_WRITETHROUGH_QCOM :: 0x40A6
MEM_HOST_WRITE_COMBINING_QCOM :: 0x40A7
Qcom_EXT_Host_Ptr_Iocoherent :: 1
QCOM_EXT_HOST_PTR_IOCOHERENT_EXTENSION_NAME :: "cl_qcom_ext_host_ptr_iocoherent"
QCOM_EXT_HOST_PTR_IOCOHERENT_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_HOST_IOCOHERENT_QCOM :: 0x40A9
Qcom_Ion_Host_Ptr :: 1
QCOM_ION_HOST_PTR_EXTENSION_NAME :: "cl_qcom_ion_host_ptr"
QCOM_ION_HOST_PTR_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_ION_HOST_PTR_QCOM :: 0x40A8
Qcom_Android_Native_Buffer_Host_Ptr :: 1
QCOM_ANDROID_NATIVE_BUFFER_HOST_PTR_EXTENSION_NAME :: "cl_qcom_android_native_buffer_host_ptr"
QCOM_ANDROID_NATIVE_BUFFER_HOST_PTR_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_ANDROID_NATIVE_BUFFER_HOST_PTR_QCOM :: 0x40C6
IMG_Yuv_Image :: 1
IMG_YUV_IMAGE_EXTENSION_NAME :: "cl_img_yuv_image"
IMG_YUV_IMAGE_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
NV21_IMG :: 0x40D0
YV12_IMG :: 0x40D1
IMG_Cached_Allocations :: 1
IMG_CACHED_ALLOCATIONS_EXTENSION_NAME :: "cl_img_cached_allocations"
IMG_CACHED_ALLOCATIONS_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_USE_UNCACHED_CPU_MEMORY_IMG :: (1 << 26)
MEM_USE_CACHED_CPU_MEMORY_IMG :: (1 << 27)
IMG_Use_Gralloc_Ptr :: 1
IMG_USE_GRALLOC_PTR_EXTENSION_NAME :: "cl_img_use_gralloc_ptr"
IMG_USE_GRALLOC_PTR_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
GRALLOC_RESOURCE_NOT_ACQUIRED_IMG :: 0x40D4
INVALID_GRALLOC_OBJECT_IMG :: 0x40D5
MEM_USE_GRALLOC_PTR_IMG :: (1 << 28)
COMMAND_ACQUIRE_GRALLOC_OBJECTS_IMG :: 0x40D2
COMMAND_RELEASE_GRALLOC_OBJECTS_IMG :: 0x40D3
IMG_Generate_Mipmap :: 1
IMG_GENERATE_MIPMAP_EXTENSION_NAME :: "cl_img_generate_mipmap"
IMG_GENERATE_MIPMAP_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MIPMAP_FILTER_ANY_IMG :: 0x0
MIPMAP_FILTER_BOX_IMG :: 0x1
COMMAND_GENERATE_MIPMAP_IMG :: 0x40D6
IMG_Mem_Properties :: 1
IMG_MEM_PROPERTIES_EXTENSION_NAME :: "cl_img_mem_properties"
IMG_MEM_PROPERTIES_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_ALLOC_FLAGS_IMG :: 0x40D7
MEM_ALLOC_RELAX_REQUIREMENTS_IMG :: (1 << 0)
MEM_ALLOC_GPU_WRITE_COMBINE_IMG :: (1 << 1)
MEM_ALLOC_GPU_CACHED_IMG :: (1 << 2)
MEM_ALLOC_CPU_LOCAL_IMG :: (1 << 3)
MEM_ALLOC_GPU_LOCAL_IMG :: (1 << 4)
MEM_ALLOC_GPU_PRIVATE_IMG :: (1 << 5)
DEVICE_MEMORY_CAPABILITIES_IMG :: 0x40D8
KHR_Subgroups :: 1
KHR_SUBGROUPS_EXTENSION_NAME :: "cl_khr_subgroups"
KHR_SUBGROUPS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_KHR :: 0x2033
KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_KHR :: 0x2034
KHR_Mipmap_Image :: 1
KHR_MIPMAP_IMAGE_EXTENSION_NAME :: "cl_khr_mipmap_image"
KHR_MIPMAP_IMAGE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
SAMPLER_MIP_FILTER_MODE_KHR :: 0x1155
SAMPLER_LOD_MIN_KHR :: 0x1156
SAMPLER_LOD_MAX_KHR :: 0x1157
KHR_Priority_Hints :: 1
KHR_PRIORITY_HINTS_EXTENSION_NAME :: "cl_khr_priority_hints"
KHR_PRIORITY_HINTS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
QUEUE_PRIORITY_KHR :: 0x1096
QUEUE_PRIORITY_HIGH_KHR :: (1 << 0)
QUEUE_PRIORITY_MED_KHR :: (1 << 1)
QUEUE_PRIORITY_LOW_KHR :: (1 << 2)
KHR_Throttle_Hints :: 1
KHR_THROTTLE_HINTS_EXTENSION_NAME :: "cl_khr_throttle_hints"
KHR_THROTTLE_HINTS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
QUEUE_THROTTLE_KHR :: 0x1097
QUEUE_THROTTLE_HIGH_KHR :: (1 << 0)
QUEUE_THROTTLE_MED_KHR :: (1 << 1)
QUEUE_THROTTLE_LOW_KHR :: (1 << 2)
KHR_Subgroup_Named_Barrier :: 1
KHR_SUBGROUP_NAMED_BARRIER_EXTENSION_NAME :: "cl_khr_subgroup_named_barrier"
KHR_SUBGROUP_NAMED_BARRIER_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_MAX_NAMED_BARRIER_COUNT_KHR :: 0x2035
KHR_Extended_Versioning :: 1
KHR_EXTENDED_VERSIONING_EXTENSION_NAME :: "cl_khr_extended_versioning"
KHR_EXTENDED_VERSIONING_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
VERSION_MAJOR_BITS_KHR :: 10
VERSION_MINOR_BITS_KHR :: 10
VERSION_PATCH_BITS_KHR :: 12
VERSION_MAJOR_MASK_KHR :: ((1 << VERSION_MAJOR_BITS_KHR) - 1)
VERSION_MINOR_MASK_KHR :: ((1 << VERSION_MINOR_BITS_KHR) - 1)
VERSION_PATCH_MASK_KHR :: ((1 << VERSION_PATCH_BITS_KHR) - 1)
VERSION_MAJOR_KHR :: #force_inline proc(version: $A) -> c.int { return ((version) >> (VERSION_MINOR_BITS_KHR + VERSION_PATCH_BITS_KHR)); }
VERSION_MINOR_KHR :: #force_inline proc(version: $A) -> c.int { return (((version) >> VERSION_PATCH_BITS_KHR) & VERSION_MINOR_MASK_KHR); }
VERSION_PATCH_KHR :: #force_inline proc(version: $A) -> c.int { return ((version) & VERSION_PATCH_MASK_KHR); }
MAKE_VERSION_KHR :: #force_inline proc(major: $A, minor: $B, patch: $C) -> c.int { return ((((major) & VERSION_MAJOR_MASK_KHR) << (VERSION_MINOR_BITS_KHR + VERSION_PATCH_BITS_KHR)) | (((minor) & VERSION_MINOR_MASK_KHR) << VERSION_PATCH_BITS_KHR) | ((patch) & VERSION_PATCH_MASK_KHR)); }
NAME_VERSION_MAX_NAME_SIZE_KHR :: 64
PLATFORM_NUMERIC_VERSION_KHR :: 0x0906
PLATFORM_EXTENSIONS_WITH_VERSION_KHR :: 0x0907
DEVICE_NUMERIC_VERSION_KHR :: 0x105E
DEVICE_OPENCL_C_NUMERIC_VERSION_KHR :: 0x105F
DEVICE_EXTENSIONS_WITH_VERSION_KHR :: 0x1060
DEVICE_ILS_WITH_VERSION_KHR :: 0x1061
DEVICE_BUILT_IN_KERNELS_WITH_VERSION_KHR :: 0x1062
KHR_Device_Uuid :: 1
KHR_DEVICE_UUID_EXTENSION_NAME :: "cl_khr_device_uuid"
KHR_DEVICE_UUID_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
UUID_SIZE_KHR :: 16
LUID_SIZE_KHR :: 8
DEVICE_UUID_KHR :: 0x106A
DRIVER_UUID_KHR :: 0x106B
DEVICE_LUID_VALID_KHR :: 0x106C
DEVICE_LUID_KHR :: 0x106D
DEVICE_NODE_MASK_KHR :: 0x106E
KHR_Pci_Bus_Info :: 1
KHR_PCI_BUS_INFO_EXTENSION_NAME :: "cl_khr_pci_bus_info"
KHR_PCI_BUS_INFO_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_PCI_BUS_INFO_KHR :: 0x410F
KHR_Suggested_Local_Work_Size :: 1
KHR_SUGGESTED_LOCAL_WORK_SIZE_EXTENSION_NAME :: "cl_khr_suggested_local_work_size"
KHR_SUGGESTED_LOCAL_WORK_SIZE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Integer_Dot_Product :: 1
KHR_INTEGER_DOT_PRODUCT_EXTENSION_NAME :: "cl_khr_integer_dot_product"
KHR_INTEGER_DOT_PRODUCT_EXTENSION_VERSION := MAKE_VERSION(2, 0, 0)
D_E_V_I_C_E__I_N_T_E_G_E_R__D_O_T__P_R_O_D_U_C_T__I_N_P_U_T__4X_8_B_I_T__P_A_C_K_E_D_KHR_ :: (1 << 0)
D_E_V_I_C_E__I_N_T_E_G_E_R__D_O_T__P_R_O_D_U_C_T__I_N_P_U_T__4X_8_B_I_T_KHR_ :: (1 << 1)
DEVICE_INTEGER_DOT_PRODUCT_CAPABILITIES_KHR :: 0x1073
DEVICE_INTEGER_DOT_PRODUCT_ACCELERATION_PROPERTIES_8BIT_KHR :: 0x1074
D_E_V_I_C_E__I_N_T_E_G_E_R__D_O_T__P_R_O_D_U_C_T__A_C_C_E_L_E_R_A_T_I_O_N__P_R_O_P_E_R_T_I_E_S__4X_8_B_I_T__P_A_C_K_E_D_KHR_ :: 0x1075
KHR_External_Memory :: 1
KHR_EXTERNAL_MEMORY_EXTENSION_NAME :: "cl_khr_external_memory"
KHR_EXTERNAL_MEMORY_EXTENSION_VERSION := MAKE_VERSION(1, 0, 1)
PLATFORM_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR :: 0x2044
DEVICE_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR :: 0x204F
DEVICE_EXTERNAL_MEMORY_IMPORT_ASSUME_LINEAR_IMAGES_HANDLE_TYPES_KHR :: 0x2052
MEM_DEVICE_HANDLE_LIST_KHR :: 0x2051
MEM_DEVICE_HANDLE_LIST_END_KHR :: 0
COMMAND_ACQUIRE_EXTERNAL_MEM_OBJECTS_KHR :: 0x2047
COMMAND_RELEASE_EXTERNAL_MEM_OBJECTS_KHR :: 0x2048
KHR_External_Memory_Dma_Buf :: 1
KHR_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME :: "cl_khr_external_memory_dma_buf"
KHR_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
EXTERNAL_MEMORY_HANDLE_DMA_BUF_KHR :: 0x2067
KHR_External_Memory_Opaque_Fd :: 1
KHR_EXTERNAL_MEMORY_OPAQUE_FD_EXTENSION_NAME :: "cl_khr_external_memory_opaque_fd"
KHR_EXTERNAL_MEMORY_OPAQUE_FD_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
EXTERNAL_MEMORY_HANDLE_OPAQUE_FD_KHR :: 0x2060
KHR_External_Memory_Win_3_2 :: 1
KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME :: "cl_khr_external_memory_win32"
KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_VERSION := MAKE_VERSION(1, 1, 0)
EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KHR :: 0x2061
EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KMT_KHR :: 0x2062
EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_NAME_KHR :: 0x2069
KHR_External_Semaphore :: 1
KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME :: "cl_khr_external_semaphore"
KHR_EXTERNAL_SEMAPHORE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 1)
PLATFORM_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR :: 0x2037
PLATFORM_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR :: 0x2038
DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR :: 0x204D
DEVICE_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR :: 0x204E
SEMAPHORE_EXPORT_HANDLE_TYPES_KHR :: 0x203F
SEMAPHORE_EXPORT_HANDLE_TYPES_LIST_END_KHR :: 0
SEMAPHORE_EXPORTABLE_KHR :: 0x2054
KHR_External_Semaphore_Opaque_Fd :: 1
KHR_EXTERNAL_SEMAPHORE_OPAQUE_FD_EXTENSION_NAME :: "cl_khr_external_semaphore_opaque_fd"
KHR_EXTERNAL_SEMAPHORE_OPAQUE_FD_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
SEMAPHORE_HANDLE_OPAQUE_FD_KHR :: 0x2055
KHR_External_Semaphore_Sync_Fd :: 1
KHR_EXTERNAL_SEMAPHORE_SYNC_FD_EXTENSION_NAME :: "cl_khr_external_semaphore_sync_fd"
KHR_EXTERNAL_SEMAPHORE_SYNC_FD_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
SEMAPHORE_HANDLE_SYNC_FD_KHR :: 0x2058
KHR_External_Semaphore_Win_3_2 :: 1
KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME :: "cl_khr_external_semaphore_win32"
KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_VERSION := MAKE_VERSION(0, 9, 1)
SEMAPHORE_HANDLE_OPAQUE_WIN32_KHR :: 0x2056
SEMAPHORE_HANDLE_OPAQUE_WIN32_KMT_KHR :: 0x2057
SEMAPHORE_HANDLE_OPAQUE_WIN32_NAME_KHR :: 0x2068
KHR_Semaphore :: 1
KHR_SEMAPHORE_EXTENSION_NAME :: "cl_khr_semaphore"
KHR_SEMAPHORE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
SEMAPHORE_TYPE_BINARY_KHR :: 1
PLATFORM_SEMAPHORE_TYPES_KHR :: 0x2036
DEVICE_SEMAPHORE_TYPES_KHR :: 0x204C
SEMAPHORE_CONTEXT_KHR :: 0x2039
SEMAPHORE_REFERENCE_COUNT_KHR :: 0x203A
SEMAPHORE_PROPERTIES_KHR :: 0x203B
SEMAPHORE_PAYLOAD_KHR :: 0x203C
SEMAPHORE_TYPE_KHR :: 0x203D
SEMAPHORE_DEVICE_HANDLE_LIST_KHR :: 0x2053
SEMAPHORE_DEVICE_HANDLE_LIST_END_KHR :: 0
COMMAND_SEMAPHORE_WAIT_KHR :: 0x2042
COMMAND_SEMAPHORE_SIGNAL_KHR :: 0x2043
INVALID_SEMAPHORE_KHR :: -1142
ARM_Import_Memory :: 1
ARM_IMPORT_MEMORY_EXTENSION_NAME :: "cl_arm_import_memory"
ARM_IMPORT_MEMORY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
IMPORT_TYPE_ARM :: 0x40B2
IMPORT_TYPE_HOST_ARM :: 0x40B3
IMPORT_TYPE_DMA_BUF_ARM :: 0x40B4
IMPORT_TYPE_PROTECTED_ARM :: 0x40B5
IMPORT_TYPE_ANDROID_HARDWARE_BUFFER_ARM :: 0x41E2
IMPORT_DMA_BUF_DATA_CONSISTENCY_WITH_HOST_ARM :: 0x41E3
IMPORT_MEMORY_WHOLE_ALLOCATION_ARM :: c.SIZE_MAX
IMPORT_ANDROID_HARDWARE_BUFFER_PLANE_INDEX_ARM :: 0x41EF
IMPORT_ANDROID_HARDWARE_BUFFER_LAYER_INDEX_ARM :: 0x41F0
ARM_Shared_Virtual_Memory :: 1
ARM_SHARED_VIRTUAL_MEMORY_EXTENSION_NAME :: "cl_arm_shared_virtual_memory"
ARM_SHARED_VIRTUAL_MEMORY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_SVM_CAPABILITIES_ARM :: 0x40B6
MEM_USES_SVM_POINTER_ARM :: 0x40B7
KERNEL_EXEC_INFO_SVM_PTRS_ARM :: 0x40B8
KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_ARM :: 0x40B9
COMMAND_SVM_FREE_ARM :: 0x40BA
COMMAND_SVM_MEMCPY_ARM :: 0x40BB
COMMAND_SVM_MEMFILL_ARM :: 0x40BC
COMMAND_SVM_MAP_ARM :: 0x40BD
COMMAND_SVM_UNMAP_ARM :: 0x40BE
DEVICE_SVM_COARSE_GRAIN_BUFFER_ARM :: (1 << 0)
DEVICE_SVM_FINE_GRAIN_BUFFER_ARM :: (1 << 1)
DEVICE_SVM_FINE_GRAIN_SYSTEM_ARM :: (1 << 2)
DEVICE_SVM_ATOMICS_ARM :: (1 << 3)
MEM_SVM_FINE_GRAIN_BUFFER_ARM :: (1 << 10)
MEM_SVM_ATOMICS_ARM :: (1 << 11)
ARM_Get_Core_ID :: 1
ARM_GET_CORE_ID_EXTENSION_NAME :: "cl_arm_get_core_id"
ARM_GET_CORE_ID_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_COMPUTE_UNITS_BITFIELD_ARM :: 0x40BF
ARM_Job_Slot_Selection :: 1
ARM_JOB_SLOT_SELECTION_EXTENSION_NAME :: "cl_arm_job_slot_selection"
ARM_JOB_SLOT_SELECTION_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_JOB_SLOTS_ARM :: 0x41E0
QUEUE_JOB_SLOT_ARM :: 0x41E1
ARM_Scheduling_Controls :: 1
ARM_SCHEDULING_CONTROLS_EXTENSION_NAME :: "cl_arm_scheduling_controls"
ARM_SCHEDULING_CONTROLS_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_SCHEDULING_KERNEL_BATCHING_ARM :: (1 << 0)
DEVICE_SCHEDULING_WORKGROUP_BATCH_SIZE_ARM :: (1 << 1)
DEVICE_SCHEDULING_WORKGROUP_BATCH_SIZE_MODIFIER_ARM :: (1 << 2)
DEVICE_SCHEDULING_DEFERRED_FLUSH_ARM :: (1 << 3)
DEVICE_SCHEDULING_REGISTER_ALLOCATION_ARM :: (1 << 4)
DEVICE_SCHEDULING_WARP_THROTTLING_ARM :: (1 << 5)
DEVICE_SCHEDULING_COMPUTE_UNIT_BATCH_QUEUE_SIZE_ARM :: (1 << 6)
DEVICE_SCHEDULING_COMPUTE_UNIT_LIMIT_ARM :: (1 << 7)
DEVICE_SCHEDULING_CONTROLS_CAPABILITIES_ARM :: 0x41E4
DEVICE_SUPPORTED_REGISTER_ALLOCATIONS_ARM :: 0x41EB
DEVICE_MAX_WARP_COUNT_ARM :: 0x41EA
KERNEL_EXEC_INFO_WORKGROUP_BATCH_SIZE_ARM :: 0x41E5
KERNEL_EXEC_INFO_WORKGROUP_BATCH_SIZE_MODIFIER_ARM :: 0x41E6
KERNEL_EXEC_INFO_WARP_COUNT_LIMIT_ARM :: 0x41E8
KERNEL_EXEC_INFO_COMPUTE_UNIT_MAX_QUEUED_BATCHES_ARM :: 0x41F1
KERNEL_MAX_WARP_COUNT_ARM :: 0x41E9
QUEUE_KERNEL_BATCHING_ARM :: 0x41E7
QUEUE_DEFERRED_FLUSH_ARM :: 0x41EC
QUEUE_COMPUTE_UNIT_LIMIT_ARM :: 0x41F3
ARM_Controlled_Kernel_Termination :: 1
ARM_CONTROLLED_KERNEL_TERMINATION_EXTENSION_NAME :: "cl_arm_controlled_kernel_termination"
ARM_CONTROLLED_KERNEL_TERMINATION_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
COMMAND_TERMINATED_ITSELF_WITH_FAILURE_ARM :: -1108
DEVICE_CONTROLLED_TERMINATION_SUCCESS_ARM :: (1 << 0)
DEVICE_CONTROLLED_TERMINATION_FAILURE_ARM :: (1 << 1)
DEVICE_CONTROLLED_TERMINATION_QUERY_ARM :: (1 << 2)
DEVICE_CONTROLLED_TERMINATION_CAPABILITIES_ARM :: 0x41EE
EVENT_COMMAND_TERMINATION_REASON_ARM :: 0x41ED
COMMAND_TERMINATION_COMPLETION_ARM :: 0
COMMAND_TERMINATION_CONTROLLED_SUCCESS_ARM :: 1
COMMAND_TERMINATION_CONTROLLED_FAILURE_ARM :: 2
COMMAND_TERMINATION_ERROR_ARM :: 3
ARM_Protected_Memory_Allocation :: 1
ARM_PROTECTED_MEMORY_ALLOCATION_EXTENSION_NAME :: "cl_arm_protected_memory_allocation"
ARM_PROTECTED_MEMORY_ALLOCATION_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_PROTECTED_ALLOC_ARM :: (cast(Bitfield)1 << 36)
INTEL_Exec_By_Local_Thread :: 1
INTEL_EXEC_BY_LOCAL_THREAD_EXTENSION_NAME :: "cl_intel_exec_by_local_thread"
INTEL_EXEC_BY_LOCAL_THREAD_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
QUEUE_THREAD_LOCAL_EXEC_ENABLE_INTEL :: (cast(Bitfield)1 << 31)
INTEL_Device_Attribute_Query :: 1
INTEL_DEVICE_ATTRIBUTE_QUERY_EXTENSION_NAME :: "cl_intel_device_attribute_query"
INTEL_DEVICE_ATTRIBUTE_QUERY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_FEATURE_FLAG_DP4A_INTEL :: (1 << 0)
DEVICE_FEATURE_FLAG_DPAS_INTEL :: (1 << 1)
DEVICE_IP_VERSION_INTEL :: 0x4250
DEVICE_ID_INTEL :: 0x4251
DEVICE_NUM_SLICES_INTEL :: 0x4252
DEVICE_NUM_SUB_SLICES_PER_SLICE_INTEL :: 0x4253
DEVICE_NUM_EUS_PER_SUB_SLICE_INTEL :: 0x4254
DEVICE_NUM_THREADS_PER_EU_INTEL :: 0x4255
DEVICE_FEATURE_CAPABILITIES_INTEL :: 0x4256
INTEL_Device_Partition_By_Names :: 1
INTEL_DEVICE_PARTITION_BY_NAMES_EXTENSION_NAME :: "cl_intel_device_partition_by_names"
INTEL_DEVICE_PARTITION_BY_NAMES_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_PARTITION_BY_NAMES_INTEL :: 0x4052
PARTITION_BY_NAMES_LIST_END_INTEL :: -1
INTEL_Accelerator :: 1
INTEL_ACCELERATOR_EXTENSION_NAME :: "cl_intel_accelerator"
INTEL_ACCELERATOR_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
ACCELERATOR_DESCRIPTOR_INTEL :: 0x4090
ACCELERATOR_REFERENCE_COUNT_INTEL :: 0x4091
ACCELERATOR_CONTEXT_INTEL :: 0x4092
ACCELERATOR_TYPE_INTEL :: 0x4093
INVALID_ACCELERATOR_INTEL :: -1094
INVALID_ACCELERATOR_TYPE_INTEL :: -1095
INVALID_ACCELERATOR_DESCRIPTOR_INTEL :: -1096
ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL :: -1097
INTEL_Motion_Estimation :: 1
INTEL_MOTION_ESTIMATION_EXTENSION_NAME :: "cl_intel_motion_estimation"
INTEL_MOTION_ESTIMATION_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
ACCELERATOR_TYPE_MOTION_ESTIMATION_INTEL :: 0x0
M_E__M_B__T_Y_P_E__1_6X_1_6__INTEL_ :: 0x0
M_E__M_B__T_Y_P_E__8X_8__INTEL_ :: 0x1
M_E__M_B__T_Y_P_E__4X_4__INTEL_ :: 0x2
ME_SUBPIXEL_MODE_INTEGER_INTEL :: 0x0
ME_SUBPIXEL_MODE_HPEL_INTEL :: 0x1
ME_SUBPIXEL_MODE_QPEL_INTEL :: 0x2
ME_SAD_ADJUST_MODE_NONE_INTEL :: 0x0
ME_SAD_ADJUST_MODE_HAAR_INTEL :: 0x1
ME_SEARCH_PATH_RADIUS_2_2_INTEL :: 0x0
ME_SEARCH_PATH_RADIUS_4_4_INTEL :: 0x1
ME_SEARCH_PATH_RADIUS_16_12_INTEL :: 0x5
INTEL_Advanced_Motion_Estimation :: 1
INTEL_ADVANCED_MOTION_ESTIMATION_EXTENSION_NAME :: "cl_intel_advanced_motion_estimation"
INTEL_ADVANCED_MOTION_ESTIMATION_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_ME_VERSION_INTEL :: 0x407E
ME_VERSION_LEGACY_INTEL :: 0x0
ME_VERSION_ADVANCED_VER_1_INTEL :: 0x1
ME_VERSION_ADVANCED_VER_2_INTEL :: 0x2
ME_CHROMA_INTRA_PREDICT_ENABLED_INTEL :: 0x1
ME_LUMA_INTRA_PREDICT_ENABLED_INTEL :: 0x2
M_E__S_K_I_P__B_L_O_C_K__T_Y_P_E__1_6X_1_6__INTEL_ :: 0x0
M_E__S_K_I_P__B_L_O_C_K__T_Y_P_E__8X_8__INTEL_ :: 0x4
ME_COST_PENALTY_NONE_INTEL :: 0x0
ME_COST_PENALTY_LOW_INTEL :: 0x1
ME_COST_PENALTY_NORMAL_INTEL :: 0x2
ME_COST_PENALTY_HIGH_INTEL :: 0x3
ME_COST_PRECISION_QPEL_INTEL :: 0x0
ME_COST_PRECISION_HPEL_INTEL :: 0x1
ME_COST_PRECISION_PEL_INTEL :: 0x2
ME_COST_PRECISION_DPEL_INTEL :: 0x3
ME_LUMA_PREDICTOR_MODE_VERTICAL_INTEL :: 0x0
ME_LUMA_PREDICTOR_MODE_HORIZONTAL_INTEL :: 0x1
ME_LUMA_PREDICTOR_MODE_DC_INTEL :: 0x2
ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_LEFT_INTEL :: 0x3
ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_RIGHT_INTEL :: 0x4
ME_LUMA_PREDICTOR_MODE_PLANE_INTEL :: 0x4
ME_LUMA_PREDICTOR_MODE_VERTICAL_RIGHT_INTEL :: 0x5
ME_LUMA_PREDICTOR_MODE_HORIZONTAL_DOWN_INTEL :: 0x6
ME_LUMA_PREDICTOR_MODE_VERTICAL_LEFT_INTEL :: 0x7
ME_LUMA_PREDICTOR_MODE_HORIZONTAL_UP_INTEL :: 0x8
ME_CHROMA_PREDICTOR_MODE_DC_INTEL :: 0x0
ME_CHROMA_PREDICTOR_MODE_HORIZONTAL_INTEL :: 0x1
ME_CHROMA_PREDICTOR_MODE_VERTICAL_INTEL :: 0x2
ME_CHROMA_PREDICTOR_MODE_PLANE_INTEL :: 0x3
ME_FORWARD_INPUT_MODE_INTEL :: 0x1
ME_BACKWARD_INPUT_MODE_INTEL :: 0x2
ME_BIDIRECTION_INPUT_MODE_INTEL :: 0x3
ME_BIDIR_WEIGHT_QUARTER_INTEL :: 16
ME_BIDIR_WEIGHT_THIRD_INTEL :: 21
ME_BIDIR_WEIGHT_HALF_INTEL :: 32
ME_BIDIR_WEIGHT_TWO_THIRD_INTEL :: 43
ME_BIDIR_WEIGHT_THREE_QUARTER_INTEL :: 48
INTEL_Simultaneous_Sharing :: 1
INTEL_SIMULTANEOUS_SHARING_EXTENSION_NAME :: "cl_intel_simultaneous_sharing"
INTEL_SIMULTANEOUS_SHARING_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_SIMULTANEOUS_INTEROPS_INTEL :: 0x4104
DEVICE_NUM_SIMULTANEOUS_INTEROPS_INTEL :: 0x4105
INTEL_Egl_Image_Yuv :: 1
INTEL_EGL_IMAGE_YUV_EXTENSION_NAME :: "cl_intel_egl_image_yuv"
INTEL_EGL_IMAGE_YUV_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
EGL_YUV_PLANE_INTEL :: 0x4107
INTEL_Packed_Yuv :: 1
INTEL_PACKED_YUV_EXTENSION_NAME :: "cl_intel_packed_yuv"
INTEL_PACKED_YUV_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
YUYV_INTEL :: 0x4076
UYVY_INTEL :: 0x4077
YVYU_INTEL :: 0x4078
VYUY_INTEL :: 0x4079
INTEL_Required_Subgroup_Size :: 1
INTEL_REQUIRED_SUBGROUP_SIZE_EXTENSION_NAME :: "cl_intel_required_subgroup_size"
INTEL_REQUIRED_SUBGROUP_SIZE_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_SUB_GROUP_SIZES_INTEL :: 0x4108
KERNEL_SPILL_MEM_SIZE_INTEL :: 0x4109
KERNEL_COMPILE_SUB_GROUP_SIZE_INTEL :: 0x410A
INTEL_Driver_Diagnostics :: 1
INTEL_DRIVER_DIAGNOSTICS_EXTENSION_NAME :: "cl_intel_driver_diagnostics"
INTEL_DRIVER_DIAGNOSTICS_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
CONTEXT_SHOW_DIAGNOSTICS_INTEL :: 0x4106
CONTEXT_DIAGNOSTICS_LEVEL_ALL_INTEL :: 0xff
CONTEXT_DIAGNOSTICS_LEVEL_GOOD_INTEL :: (1 << 0)
CONTEXT_DIAGNOSTICS_LEVEL_BAD_INTEL :: (1 << 1)
CONTEXT_DIAGNOSTICS_LEVEL_NEUTRAL_INTEL :: (1 << 2)
INTEL_Planar_Yuv :: 1
INTEL_PLANAR_YUV_EXTENSION_NAME :: "cl_intel_planar_yuv"
INTEL_PLANAR_YUV_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
NV12_INTEL :: 0x410E
MEM_NO_ACCESS_INTEL :: (1 << 24)
MEM_ACCESS_FLAGS_UNRESTRICTED_INTEL :: (1 << 25)
DEVICE_PLANAR_YUV_MAX_WIDTH_INTEL :: 0x417E
DEVICE_PLANAR_YUV_MAX_HEIGHT_INTEL :: 0x417F
INTEL_Device_Side_Avc_Motion_Estimation :: 1
INTEL_DEVICE_SIDE_AVC_MOTION_ESTIMATION_EXTENSION_NAME :: "cl_intel_device_side_avc_motion_estimation"
INTEL_DEVICE_SIDE_AVC_MOTION_ESTIMATION_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_AVC_ME_VERSION_INTEL :: 0x410B
DEVICE_AVC_ME_SUPPORTS_TEXTURE_SAMPLER_USE_INTEL :: 0x410C
DEVICE_AVC_ME_SUPPORTS_PREEMPTION_INTEL :: 0x410D
AVC_ME_VERSION_0_INTEL :: 0x0
AVC_ME_VERSION_1_INTEL :: 0x1
A_V_C__M_E__M_A_J_O_R__1_6X_1_6__INTEL_ :: 0x0
A_V_C__M_E__M_A_J_O_R__1_6X_8__INTEL_ :: 0x1
A_V_C__M_E__M_A_J_O_R__8X_1_6__INTEL_ :: 0x2
A_V_C__M_E__M_A_J_O_R__8X_8__INTEL_ :: 0x3
A_V_C__M_E__M_I_N_O_R__8X_8__INTEL_ :: 0x0
A_V_C__M_E__M_I_N_O_R__8X_4__INTEL_ :: 0x1
A_V_C__M_E__M_I_N_O_R__4X_8__INTEL_ :: 0x2
A_V_C__M_E__M_I_N_O_R__4X_4__INTEL_ :: 0x3
AVC_ME_MAJOR_FORWARD_INTEL :: 0x0
AVC_ME_MAJOR_BACKWARD_INTEL :: 0x1
AVC_ME_MAJOR_BIDIRECTIONAL_INTEL :: 0x2
AVC_ME_PARTITION_MASK_ALL_INTEL :: 0x0
A_V_C__M_E__P_A_R_T_I_T_I_O_N__M_A_S_K__1_6X_1_6__INTEL_ :: 0x7E
A_V_C__M_E__P_A_R_T_I_T_I_O_N__M_A_S_K__1_6X_8__INTEL_ :: 0x7D
A_V_C__M_E__P_A_R_T_I_T_I_O_N__M_A_S_K__8X_1_6__INTEL_ :: 0x7B
A_V_C__M_E__P_A_R_T_I_T_I_O_N__M_A_S_K__8X_8__INTEL_ :: 0x77
A_V_C__M_E__P_A_R_T_I_T_I_O_N__M_A_S_K__8X_4__INTEL_ :: 0x6F
A_V_C__M_E__P_A_R_T_I_T_I_O_N__M_A_S_K__4X_8__INTEL_ :: 0x5F
A_V_C__M_E__P_A_R_T_I_T_I_O_N__M_A_S_K__4X_4__INTEL_ :: 0x3F
AVC_ME_SEARCH_WINDOW_EXHAUSTIVE_INTEL :: 0x0
AVC_ME_SEARCH_WINDOW_SMALL_INTEL :: 0x1
AVC_ME_SEARCH_WINDOW_TINY_INTEL :: 0x2
AVC_ME_SEARCH_WINDOW_EXTRA_TINY_INTEL :: 0x3
AVC_ME_SEARCH_WINDOW_DIAMOND_INTEL :: 0x4
AVC_ME_SEARCH_WINDOW_LARGE_DIAMOND_INTEL :: 0x5
AVC_ME_SEARCH_WINDOW_RESERVED0_INTEL :: 0x6
AVC_ME_SEARCH_WINDOW_RESERVED1_INTEL :: 0x7
AVC_ME_SEARCH_WINDOW_CUSTOM_INTEL :: 0x8
A_V_C__M_E__S_E_A_R_C_H__W_I_ND_O_W__1_6X_1_2__R_A_D_I_U_S__INTEL_ :: 0x9
A_V_C__M_E__S_E_A_R_C_H__W_I_ND_O_W__4X_4__R_A_D_I_U_S__INTEL_ :: 0x2
A_V_C__M_E__S_E_A_R_C_H__W_I_ND_O_W__2X_2__R_A_D_I_U_S__INTEL_ :: 0xa
AVC_ME_SAD_ADJUST_MODE_NONE_INTEL :: 0x0
AVC_ME_SAD_ADJUST_MODE_HAAR_INTEL :: 0x2
AVC_ME_SUBPIXEL_MODE_INTEGER_INTEL :: 0x0
AVC_ME_SUBPIXEL_MODE_HPEL_INTEL :: 0x1
AVC_ME_SUBPIXEL_MODE_QPEL_INTEL :: 0x3
AVC_ME_COST_PRECISION_QPEL_INTEL :: 0x0
AVC_ME_COST_PRECISION_HPEL_INTEL :: 0x1
AVC_ME_COST_PRECISION_PEL_INTEL :: 0x2
AVC_ME_COST_PRECISION_DPEL_INTEL :: 0x3
AVC_ME_BIDIR_WEIGHT_QUARTER_INTEL :: 0x10
AVC_ME_BIDIR_WEIGHT_THIRD_INTEL :: 0x15
AVC_ME_BIDIR_WEIGHT_HALF_INTEL :: 0x20
AVC_ME_BIDIR_WEIGHT_TWO_THIRD_INTEL :: 0x2B
AVC_ME_BIDIR_WEIGHT_THREE_QUARTER_INTEL :: 0x30
AVC_ME_BORDER_REACHED_LEFT_INTEL :: 0x0
AVC_ME_BORDER_REACHED_RIGHT_INTEL :: 0x2
AVC_ME_BORDER_REACHED_TOP_INTEL :: 0x4
AVC_ME_BORDER_REACHED_BOTTOM_INTEL :: 0x8
A_V_C__M_E__S_K_I_P__B_L_O_C_K__P_A_R_T_I_T_I_O_N__1_6X_1_6__INTEL_ :: 0x0
A_V_C__M_E__S_K_I_P__B_L_O_C_K__P_A_R_T_I_T_I_O_N__8X_8__INTEL_ :: 0x4000
A_V_C__M_E__S_K_I_P__B_L_O_C_K__1_6X_1_6__F_O_R_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x1 << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__1_6X_1_6__B_A_C_K_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x2 << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__1_6X_1_6__D_U_A_L__E_N_A_B_L_E__INTEL_ :: (0x3 << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__F_O_R_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x55 << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__B_A_C_K_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0xAA << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__D_U_A_L__E_N_A_B_L_E__INTEL_ :: (0xFF << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__0__F_O_R_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x1 << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__0__B_A_C_K_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x2 << 24)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__1__F_O_R_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x1 << 26)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__1__B_A_C_K_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x2 << 26)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__2__F_O_R_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x1 << 28)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__2__B_A_C_K_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x2 << 28)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__3__F_O_R_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x1 << 30)
A_V_C__M_E__S_K_I_P__B_L_O_C_K__8X_8__3__B_A_C_K_W_A_R_D__E_N_A_B_L_E__INTEL_ :: (0x2 << 30)
A_V_C__M_E__B_L_O_C_K__B_A_S_E_D__S_K_I_P__4X_4__INTEL_ :: 0x00
A_V_C__M_E__B_L_O_C_K__B_A_S_E_D__S_K_I_P__8X_8__INTEL_ :: 0x80
A_V_C__M_E__I_N_T_R_A__1_6X_1_6__INTEL_ :: 0x0
A_V_C__M_E__I_N_T_R_A__8X_8__INTEL_ :: 0x1
A_V_C__M_E__I_N_T_R_A__4X_4__INTEL_ :: 0x2
A_V_C__M_E__I_N_T_R_A__L_U_M_A__P_A_R_T_I_T_I_O_N__M_A_S_K__1_6X_1_6__INTEL_ :: 0x6
A_V_C__M_E__I_N_T_R_A__L_U_M_A__P_A_R_T_I_T_I_O_N__M_A_S_K__8X_8__INTEL_ :: 0x5
A_V_C__M_E__I_N_T_R_A__L_U_M_A__P_A_R_T_I_T_I_O_N__M_A_S_K__4X_4__INTEL_ :: 0x3
AVC_ME_INTRA_NEIGHBOR_LEFT_MASK_ENABLE_INTEL :: 0x60
AVC_ME_INTRA_NEIGHBOR_UPPER_MASK_ENABLE_INTEL :: 0x10
AVC_ME_INTRA_NEIGHBOR_UPPER_RIGHT_MASK_ENABLE_INTEL :: 0x8
AVC_ME_INTRA_NEIGHBOR_UPPER_LEFT_MASK_ENABLE_INTEL :: 0x4
AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_INTEL :: 0x0
AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_INTEL :: 0x1
AVC_ME_LUMA_PREDICTOR_MODE_DC_INTEL :: 0x2
AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_LEFT_INTEL :: 0x3
AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_RIGHT_INTEL :: 0x4
AVC_ME_LUMA_PREDICTOR_MODE_PLANE_INTEL :: 0x4
AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_RIGHT_INTEL :: 0x5
AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_DOWN_INTEL :: 0x6
AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_LEFT_INTEL :: 0x7
AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_UP_INTEL :: 0x8
AVC_ME_CHROMA_PREDICTOR_MODE_DC_INTEL :: 0x0
AVC_ME_CHROMA_PREDICTOR_MODE_HORIZONTAL_INTEL :: 0x1
AVC_ME_CHROMA_PREDICTOR_MODE_VERTICAL_INTEL :: 0x2
AVC_ME_CHROMA_PREDICTOR_MODE_PLANE_INTEL :: 0x3
AVC_ME_FRAME_FORWARD_INTEL :: 0x1
AVC_ME_FRAME_BACKWARD_INTEL :: 0x2
AVC_ME_FRAME_DUAL_INTEL :: 0x3
AVC_ME_SLICE_TYPE_PRED_INTEL :: 0x0
AVC_ME_SLICE_TYPE_BPRED_INTEL :: 0x1
AVC_ME_SLICE_TYPE_INTRA_INTEL :: 0x2
AVC_ME_INTERLACED_SCAN_TOP_FIELD_INTEL :: 0x0
AVC_ME_INTERLACED_SCAN_BOTTOM_FIELD_INTEL :: 0x1
INTEL_Unified_Shared_Memory :: 1
INTEL_UNIFIED_SHARED_MEMORY_EXTENSION_NAME :: "cl_intel_unified_shared_memory"
INTEL_UNIFIED_SHARED_MEMORY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
DEVICE_HOST_MEM_CAPABILITIES_INTEL :: 0x4190
DEVICE_DEVICE_MEM_CAPABILITIES_INTEL :: 0x4191
DEVICE_SINGLE_DEVICE_SHARED_MEM_CAPABILITIES_INTEL :: 0x4192
DEVICE_CROSS_DEVICE_SHARED_MEM_CAPABILITIES_INTEL :: 0x4193
DEVICE_SHARED_SYSTEM_MEM_CAPABILITIES_INTEL :: 0x4194
UNIFIED_SHARED_MEMORY_ACCESS_INTEL :: (1 << 0)
UNIFIED_SHARED_MEMORY_ATOMIC_ACCESS_INTEL :: (1 << 1)
UNIFIED_SHARED_MEMORY_CONCURRENT_ACCESS_INTEL :: (1 << 2)
UNIFIED_SHARED_MEMORY_CONCURRENT_ATOMIC_ACCESS_INTEL :: (1 << 3)
MEM_ALLOC_FLAGS_INTEL :: 0x4195
MEM_ALLOC_WRITE_COMBINED_INTEL :: (1 << 0)
MEM_ALLOC_INITIAL_PLACEMENT_DEVICE_INTEL :: (1 << 1)
MEM_ALLOC_INITIAL_PLACEMENT_HOST_INTEL :: (1 << 2)
MEM_ALLOC_TYPE_INTEL :: 0x419A
MEM_ALLOC_BASE_PTR_INTEL :: 0x419B
MEM_ALLOC_SIZE_INTEL :: 0x419C
MEM_ALLOC_DEVICE_INTEL :: 0x419D
MEM_TYPE_UNKNOWN_INTEL :: 0x4196
MEM_TYPE_HOST_INTEL :: 0x4197
MEM_TYPE_DEVICE_INTEL :: 0x4198
MEM_TYPE_SHARED_INTEL :: 0x4199
KERNEL_EXEC_INFO_INDIRECT_HOST_ACCESS_INTEL :: 0x4200
KERNEL_EXEC_INFO_INDIRECT_DEVICE_ACCESS_INTEL :: 0x4201
KERNEL_EXEC_INFO_INDIRECT_SHARED_ACCESS_INTEL :: 0x4202
KERNEL_EXEC_INFO_USM_PTRS_INTEL :: 0x4203
COMMAND_MEMFILL_INTEL :: 0x4204
COMMAND_MEMCPY_INTEL :: 0x4205
COMMAND_MIGRATEMEM_INTEL :: 0x4206
COMMAND_MEMADVISE_INTEL :: 0x4207
INTEL_Mem_Alloc_Buffer_Location :: 1
INTEL_MEM_ALLOC_BUFFER_LOCATION_EXTENSION_NAME :: "cl_intel_mem_alloc_buffer_location"
INTEL_MEM_ALLOC_BUFFER_LOCATION_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_ALLOC_BUFFER_LOCATION_INTEL :: 0x419E
INTEL_Create_Buffer_With_Properties :: 1
INTEL_CREATE_BUFFER_WITH_PROPERTIES_EXTENSION_NAME :: "cl_intel_create_buffer_with_properties"
INTEL_CREATE_BUFFER_WITH_PROPERTIES_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
INTEL_Program_Scope_Host_Pipe :: 1
INTEL_PROGRAM_SCOPE_HOST_PIPE_EXTENSION_NAME :: "cl_intel_program_scope_host_pipe"
INTEL_PROGRAM_SCOPE_HOST_PIPE_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
COMMAND_READ_HOST_PIPE_INTEL :: 0x4214
COMMAND_WRITE_HOST_PIPE_INTEL :: 0x4215
PROGRAM_NUM_HOST_PIPES_INTEL :: 0x4216
PROGRAM_HOST_PIPE_NAMES_INTEL :: 0x4217
INTEL_Mem_Channel_Property :: 1
INTEL_MEM_CHANNEL_PROPERTY_EXTENSION_NAME :: "cl_intel_mem_channel_property"
INTEL_MEM_CHANNEL_PROPERTY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_CHANNEL_INTEL :: 0x4213
INTEL_Mem_Force_Host_Memory :: 1
INTEL_MEM_FORCE_HOST_MEMORY_EXTENSION_NAME :: "cl_intel_mem_force_host_memory"
INTEL_MEM_FORCE_HOST_MEMORY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_FORCE_HOST_MEMORY_INTEL :: (1 << 20)
INTEL_Command_Queue_Families :: 1
INTEL_COMMAND_QUEUE_FAMILIES_EXTENSION_NAME :: "cl_intel_command_queue_families"
INTEL_COMMAND_QUEUE_FAMILIES_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
QUEUE_FAMILY_MAX_NAME_SIZE_INTEL :: 64
DEVICE_QUEUE_FAMILY_PROPERTIES_INTEL :: 0x418B
QUEUE_FAMILY_INTEL :: 0x418C
QUEUE_INDEX_INTEL :: 0x418D
QUEUE_DEFAULT_CAPABILITIES_INTEL :: 0
QUEUE_CAPABILITY_CREATE_SINGLE_QUEUE_EVENTS_INTEL :: (1 << 0)
QUEUE_CAPABILITY_CREATE_CROSS_QUEUE_EVENTS_INTEL :: (1 << 1)
QUEUE_CAPABILITY_SINGLE_QUEUE_EVENT_WAIT_LIST_INTEL :: (1 << 2)
QUEUE_CAPABILITY_CROSS_QUEUE_EVENT_WAIT_LIST_INTEL :: (1 << 3)
QUEUE_CAPABILITY_TRANSFER_BUFFER_INTEL :: (1 << 8)
QUEUE_CAPABILITY_TRANSFER_BUFFER_RECT_INTEL :: (1 << 9)
QUEUE_CAPABILITY_MAP_BUFFER_INTEL :: (1 << 10)
QUEUE_CAPABILITY_FILL_BUFFER_INTEL :: (1 << 11)
QUEUE_CAPABILITY_TRANSFER_IMAGE_INTEL :: (1 << 12)
QUEUE_CAPABILITY_MAP_IMAGE_INTEL :: (1 << 13)
QUEUE_CAPABILITY_FILL_IMAGE_INTEL :: (1 << 14)
QUEUE_CAPABILITY_TRANSFER_BUFFER_IMAGE_INTEL :: (1 << 15)
QUEUE_CAPABILITY_TRANSFER_IMAGE_BUFFER_INTEL :: (1 << 16)
QUEUE_CAPABILITY_MARKER_INTEL :: (1 << 24)
QUEUE_CAPABILITY_BARRIER_INTEL :: (1 << 25)
QUEUE_CAPABILITY_KERNEL_INTEL :: (1 << 26)
INTEL_Queue_No_Sync_Operations :: 1
INTEL_QUEUE_NO_SYNC_OPERATIONS_EXTENSION_NAME :: "cl_intel_queue_no_sync_operations"
INTEL_QUEUE_NO_SYNC_OPERATIONS_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
QUEUE_NO_SYNC_OPERATIONS_INTEL :: (1 << 29)
INTEL_Sharing_Format_Query :: 1
INTEL_SHARING_FORMAT_QUERY_EXTENSION_NAME :: "cl_intel_sharing_format_query"
INTEL_SHARING_FORMAT_QUERY_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
EXT_Image_Requirements_Info :: 1
EXT_IMAGE_REQUIREMENTS_INFO_EXTENSION_NAME :: "cl_ext_image_requirements_info"
EXT_IMAGE_REQUIREMENTS_INFO_EXTENSION_VERSION := MAKE_VERSION(0, 5, 0)
IMAGE_REQUIREMENTS_BASE_ADDRESS_ALIGNMENT_EXT :: 0x1292
IMAGE_REQUIREMENTS_ROW_PITCH_ALIGNMENT_EXT :: 0x1290
IMAGE_REQUIREMENTS_SIZE_EXT :: 0x12B2
IMAGE_REQUIREMENTS_MAX_WIDTH_EXT :: 0x12B3
IMAGE_REQUIREMENTS_MAX_HEIGHT_EXT :: 0x12B4
IMAGE_REQUIREMENTS_MAX_DEPTH_EXT :: 0x12B5
IMAGE_REQUIREMENTS_MAX_ARRAY_SIZE_EXT :: 0x12B6
EXT_Image_From_Buffer :: 1
EXT_IMAGE_FROM_BUFFER_EXTENSION_NAME :: "cl_ext_image_from_buffer"
EXT_IMAGE_FROM_BUFFER_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
IMAGE_REQUIREMENTS_SLICE_PITCH_ALIGNMENT_EXT :: 0x1291
Loader_Info :: 1
LOADER_INFO_EXTENSION_NAME :: "cl_loader_info"
LOADER_INFO_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
ICDL_OCL_VERSION :: 1
ICDL_VERSION :: 2
ICDL_NAME :: 3
ICDL_VENDOR :: 4
KHR_Depth_Images :: 1
KHR_DEPTH_IMAGES_EXTENSION_NAME :: "cl_khr_depth_images"
KHR_DEPTH_IMAGES_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
EXT_Float_Atomics :: 1
EXT_FLOAT_ATOMICS_EXTENSION_NAME :: "cl_ext_float_atomics"
EXT_FLOAT_ATOMICS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
DEVICE_GLOBAL_FP_ATOMIC_LOAD_STORE_EXT :: (1 << 0)
DEVICE_GLOBAL_FP_ATOMIC_ADD_EXT :: (1 << 1)
DEVICE_GLOBAL_FP_ATOMIC_MIN_MAX_EXT :: (1 << 2)
DEVICE_LOCAL_FP_ATOMIC_LOAD_STORE_EXT :: (1 << 16)
DEVICE_LOCAL_FP_ATOMIC_ADD_EXT :: (1 << 17)
DEVICE_LOCAL_FP_ATOMIC_MIN_MAX_EXT :: (1 << 18)
DEVICE_SINGLE_FP_ATOMIC_CAPABILITIES_EXT :: 0x4231
DEVICE_DOUBLE_FP_ATOMIC_CAPABILITIES_EXT :: 0x4232
DEVICE_HALF_FP_ATOMIC_CAPABILITIES_EXT :: 0x4233
INTEL_Create_Mem_Object_Properties :: 1
INTEL_CREATE_MEM_OBJECT_PROPERTIES_EXTENSION_NAME :: "cl_intel_create_mem_object_properties"
INTEL_CREATE_MEM_OBJECT_PROPERTIES_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
MEM_LOCALLY_UNCACHED_RESOURCE_INTEL :: 0x4218
MEM_DEVICE_ID_INTEL :: 0x4219
Pocl_Content_Size :: 1
POCL_CONTENT_SIZE_EXTENSION_NAME :: "cl_pocl_content_size"
POCL_CONTENT_SIZE_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
EXT_Image_Raw_1_0_Raw_1_2 :: 1
EXT_IMAGE_RAW10_RAW12_EXTENSION_NAME :: "cl_ext_image_raw10_raw12"
EXT_IMAGE_RAW10_RAW12_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
UNSIGNED_INT_RAW10_EXT :: 0x10E3
UNSIGNED_INT_RAW12_EXT :: 0x10E4
KHR3D_Image_Writes :: 1
KHR_3D_IMAGE_WRITES_EXTENSION_NAME :: "cl_khr_3d_image_writes"
KHR_3D_IMAGE_WRITES_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Async_Work_Group_Copy_Fence :: 1
KHR_ASYNC_WORK_GROUP_COPY_FENCE_EXTENSION_NAME :: "cl_khr_async_work_group_copy_fence"
KHR_ASYNC_WORK_GROUP_COPY_FENCE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Byte_Addressable_Store :: 1
KHR_BYTE_ADDRESSABLE_STORE_EXTENSION_NAME :: "cl_khr_byte_addressable_store"
KHR_BYTE_ADDRESSABLE_STORE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Device_Enqueue_Local_Arg_Types :: 1
KHR_DEVICE_ENQUEUE_LOCAL_ARG_TYPES_EXTENSION_NAME :: "cl_khr_device_enqueue_local_arg_types"
KHR_DEVICE_ENQUEUE_LOCAL_ARG_TYPES_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Expect_Assume :: 1
KHR_EXPECT_ASSUME_EXTENSION_NAME :: "cl_khr_expect_assume"
KHR_EXPECT_ASSUME_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Extended_Async_Copies :: 1
KHR_EXTENDED_ASYNC_COPIES_EXTENSION_NAME :: "cl_khr_extended_async_copies"
KHR_EXTENDED_ASYNC_COPIES_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Extended_Bit_Ops :: 1
KHR_EXTENDED_BIT_OPS_EXTENSION_NAME :: "cl_khr_extended_bit_ops"
KHR_EXTENDED_BIT_OPS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Global_Int_3_2_Base_Atomics :: 1
KHR_GLOBAL_INT32_BASE_ATOMICS_EXTENSION_NAME :: "cl_khr_global_int32_base_atomics"
KHR_GLOBAL_INT32_BASE_ATOMICS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Global_Int_3_2_Extended_Atomics :: 1
KHR_GLOBAL_INT32_EXTENDED_ATOMICS_EXTENSION_NAME :: "cl_khr_global_int32_extended_atomics"
KHR_GLOBAL_INT32_EXTENDED_ATOMICS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Int_6_4_Base_Atomics :: 1
KHR_INT64_BASE_ATOMICS_EXTENSION_NAME :: "cl_khr_int64_base_atomics"
KHR_INT64_BASE_ATOMICS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Int_6_4_Extended_Atomics :: 1
KHR_INT64_EXTENDED_ATOMICS_EXTENSION_NAME :: "cl_khr_int64_extended_atomics"
KHR_INT64_EXTENDED_ATOMICS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Kernel_Clock :: 1
KHR_KERNEL_CLOCK_EXTENSION_NAME :: "cl_khr_kernel_clock"
KHR_KERNEL_CLOCK_EXTENSION_VERSION := MAKE_VERSION(0, 9, 0)
DEVICE_KERNEL_CLOCK_CAPABILITIES_KHR :: 0x1076
DEVICE_KERNEL_CLOCK_SCOPE_DEVICE_KHR :: (1 << 0)
DEVICE_KERNEL_CLOCK_SCOPE_WORK_GROUP_KHR :: (1 << 1)
DEVICE_KERNEL_CLOCK_SCOPE_SUB_GROUP_KHR :: (1 << 2)
KHR_Local_Int_3_2_Base_Atomics :: 1
KHR_LOCAL_INT32_BASE_ATOMICS_EXTENSION_NAME :: "cl_khr_local_int32_base_atomics"
KHR_LOCAL_INT32_BASE_ATOMICS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Local_Int_3_2_Extended_Atomics :: 1
KHR_LOCAL_INT32_EXTENDED_ATOMICS_EXTENSION_NAME :: "cl_khr_local_int32_extended_atomics"
KHR_LOCAL_INT32_EXTENDED_ATOMICS_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Mipmap_Image_Writes :: 1
KHR_MIPMAP_IMAGE_WRITES_EXTENSION_NAME :: "cl_khr_mipmap_image_writes"
KHR_MIPMAP_IMAGE_WRITES_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Select_Fprounding_Mode :: 1
KHR_SELECT_FPROUNDING_MODE_EXTENSION_NAME :: "cl_khr_select_fprounding_mode"
KHR_SELECT_FPROUNDING_MODE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Spirv_Extended_Debug_Info :: 1
KHR_SPIRV_EXTENDED_DEBUG_INFO_EXTENSION_NAME :: "cl_khr_spirv_extended_debug_info"
KHR_SPIRV_EXTENDED_DEBUG_INFO_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Spirv_Linkonce_Odr :: 1
KHR_SPIRV_LINKONCE_ODR_EXTENSION_NAME :: "cl_khr_spirv_linkonce_odr"
KHR_SPIRV_LINKONCE_ODR_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Spirv_No_Integer_Wrap_Decoration :: 1
KHR_SPIRV_NO_INTEGER_WRAP_DECORATION_EXTENSION_NAME :: "cl_khr_spirv_no_integer_wrap_decoration"
KHR_SPIRV_NO_INTEGER_WRAP_DECORATION_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Srgb_Image_Writes :: 1
KHR_SRGB_IMAGE_WRITES_EXTENSION_NAME :: "cl_khr_srgb_image_writes"
KHR_SRGB_IMAGE_WRITES_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Ballot :: 1
KHR_SUBGROUP_BALLOT_EXTENSION_NAME :: "cl_khr_subgroup_ballot"
KHR_SUBGROUP_BALLOT_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Clustered_Reduce :: 1
KHR_SUBGROUP_CLUSTERED_REDUCE_EXTENSION_NAME :: "cl_khr_subgroup_clustered_reduce"
KHR_SUBGROUP_CLUSTERED_REDUCE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Extended_Types :: 1
KHR_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME :: "cl_khr_subgroup_extended_types"
KHR_SUBGROUP_EXTENDED_TYPES_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Non_Uniform_Arithmetic :: 1
KHR_SUBGROUP_NON_UNIFORM_ARITHMETIC_EXTENSION_NAME :: "cl_khr_subgroup_non_uniform_arithmetic"
KHR_SUBGROUP_NON_UNIFORM_ARITHMETIC_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Non_Uniform_Vote :: 1
KHR_SUBGROUP_NON_UNIFORM_VOTE_EXTENSION_NAME :: "cl_khr_subgroup_non_uniform_vote"
KHR_SUBGROUP_NON_UNIFORM_VOTE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Rotate :: 1
KHR_SUBGROUP_ROTATE_EXTENSION_NAME :: "cl_khr_subgroup_rotate"
KHR_SUBGROUP_ROTATE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Shuffle :: 1
KHR_SUBGROUP_SHUFFLE_EXTENSION_NAME :: "cl_khr_subgroup_shuffle"
KHR_SUBGROUP_SHUFFLE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Subgroup_Shuffle_Relative :: 1
KHR_SUBGROUP_SHUFFLE_RELATIVE_EXTENSION_NAME :: "cl_khr_subgroup_shuffle_relative"
KHR_SUBGROUP_SHUFFLE_RELATIVE_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
KHR_Work_Group_Uniform_Arithmetic :: 1
KHR_WORK_GROUP_UNIFORM_ARITHMETIC_EXTENSION_NAME :: "cl_khr_work_group_uniform_arithmetic"
KHR_WORK_GROUP_UNIFORM_ARITHMETIC_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
EXT_Image_Unorm_Int__2__1_0_1_0_1_0 :: 1
EXT_IMAGE_UNORM_INT_2_101010_EXTENSION_NAME :: "cl_ext_image_unorm_int_2_101010"
EXT_IMAGE_UNORM_INT_2_101010_EXTENSION_VERSION := MAKE_VERSION(1, 0, 0)
UNORM_INT_2_101010_EXT :: 0x10E5
IMG_Cancel_Command :: 1
IMG_CANCEL_COMMAND_EXTENSION_NAME :: "cl_img_cancel_command"
IMG_CANCEL_COMMAND_EXTENSION_VERSION := MAKE_VERSION(0, 0, 0)
CANCELLED_IMG :: -1126

Device_Command_Buffer_Capabilities_KHR :: Bitfield
Command_Buffer_KHR :: distinct rawptr
Sync_Point_KHR :: Uint
Command_Buffer_Info_KHR :: Uint
Command_Buffer_State_KHR :: Uint
Command_Buffer_Properties_KHR :: Properties
Command_Buffer_Flags_KHR :: Bitfield
Command_Properties_KHR :: Properties
Mutable_Command_KHR :: distinct rawptr
Create_Command_Buffer_KHR_T :: #type proc  (
             num_queues: Uint,
             queues: ^Command_Queue,
             properties: ^Command_Buffer_Properties_KHR,
             errcode_ret: ^Int) -> Command_Buffer_KHR
Create_Command_Buffer_KHR_Fn :: ^Create_Command_Buffer_KHR_T
Finalize_Command_Buffer_KHR_T :: #type proc  (command_buffer: Command_Buffer_KHR) -> Int
Finalize_Command_Buffer_KHR_Fn :: ^Finalize_Command_Buffer_KHR_T
Retain_Command_Buffer_KHR_T :: #type proc  (command_buffer: Command_Buffer_KHR) -> Int
Retain_Command_Buffer_KHR_Fn :: ^Retain_Command_Buffer_KHR_T
Release_Command_Buffer_KHR_T :: #type proc  (command_buffer: Command_Buffer_KHR) -> Int
Release_Command_Buffer_KHR_Fn :: ^Release_Command_Buffer_KHR_T
Enqueue_Command_Buffer_KHR_T :: #type proc  (
             num_queues: Uint,
             queues: ^Command_Queue,
             command_buffer: Command_Buffer_KHR,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Command_Buffer_KHR_Fn :: ^Enqueue_Command_Buffer_KHR_T
Command_Barrier_With_Wait_List_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Barrier_With_Wait_List_KHR_Fn :: ^Command_Barrier_With_Wait_List_KHR_T
Command_Copy_Buffer_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             src_buffer: Mem,
             dst_buffer: Mem,
             src_offset: c.size_t,
             dst_offset: c.size_t,
             size: c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Copy_Buffer_KHR_Fn :: ^Command_Copy_Buffer_KHR_T
Command_Copy_Buffer_Rect_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             src_buffer: Mem,
             dst_buffer: Mem,
             src_origin: ^c.size_t,
             dst_origin: ^c.size_t,
             region: ^c.size_t,
             src_row_pitch: c.size_t,
             src_slice_pitch: c.size_t,
             dst_row_pitch: c.size_t,
             dst_slice_pitch: c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Copy_Buffer_Rect_KHR_Fn :: ^Command_Copy_Buffer_Rect_KHR_T
Command_Copy_Buffer_To_Image_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             src_buffer: Mem,
             dst_image: Mem,
             src_offset: c.size_t,
             dst_origin: ^c.size_t,
             region: ^c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Copy_Buffer_To_Image_KHR_Fn :: ^Command_Copy_Buffer_To_Image_KHR_T
Command_Copy_Image_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             src_image: Mem,
             dst_image: Mem,
             src_origin: ^c.size_t,
             dst_origin: ^c.size_t,
             region: ^c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Copy_Image_KHR_Fn :: ^Command_Copy_Image_KHR_T
Command_Copy_Image_To_Buffer_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             src_image: Mem,
             dst_buffer: Mem,
             src_origin: ^c.size_t,
             region: ^c.size_t,
             dst_offset: c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Copy_Image_To_Buffer_KHR_Fn :: ^Command_Copy_Image_To_Buffer_KHR_T
Command_Fill_Buffer_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             buffer: Mem,
             pattern: rawptr,
             pattern_size: c.size_t,
             offset: c.size_t,
             size: c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Fill_Buffer_KHR_Fn :: ^Command_Fill_Buffer_KHR_T
Command_Fill_Image_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             image: Mem,
             fill_color: rawptr,
             origin: ^c.size_t,
             region: ^c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_Fill_Image_KHR_Fn :: ^Command_Fill_Image_KHR_T
Command_ND_Range_Kernel_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             kernel: Kernel,
             work_dim: Uint,
             global_work_offset: ^c.size_t,
             global_work_size: ^c.size_t,
             local_work_size: ^c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_ND_Range_Kernel_KHR_Fn :: ^Command_ND_Range_Kernel_KHR_T
Get_Command_Buffer_Info_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             param_name: Command_Buffer_Info_KHR,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Command_Buffer_Info_KHR_Fn :: ^Get_Command_Buffer_Info_KHR_T
Command_SVM_Memcpy_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             dst_ptr: rawptr,
             src_ptr: rawptr,
             size: c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_SVM_Memcpy_KHR_Fn :: ^Command_SVM_Memcpy_KHR_T
Command_SVM_Mem_Fill_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             command_queue: Command_Queue,
             properties: ^Command_Properties_KHR,
             svm_ptr: rawptr,
             pattern: rawptr,
             pattern_size: c.size_t,
             size: c.size_t,
             num_sync_points_in_wait_list: Uint,
             sync_point_wait_list: ^Sync_Point_KHR,
             sync_point: ^Sync_Point_KHR,
             mutable_handle: ^Mutable_Command_KHR) -> Int
Command_SVM_Mem_Fill_KHR_Fn :: ^Command_SVM_Mem_Fill_KHR_T
Platform_Command_Buffer_Capabilities_KHR :: Bitfield
Remap_Command_Buffer_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             automatic: Bool,
             num_queues: Uint,
             queues: ^Command_Queue,
             num_handles: Uint,
             handles: ^Mutable_Command_KHR,
             handles_ret: ^Mutable_Command_KHR,
             errcode_ret: ^Int) -> Command_Buffer_KHR
Remap_Command_Buffer_KHR_Fn :: ^Remap_Command_Buffer_KHR_T
Command_Buffer_Update_Type_KHR :: Uint
Mutable_Dispatch_Fields_KHR :: Bitfield
Mutable_Command_Info_KHR :: Uint
Mutable_Dispatch_Arg_KHR :: struct{
	arg_index: Uint,
	arg_size: c.size_t,
	arg_value: rawptr,
}
Mutable_Dispatch_Exec_Info_KHR :: struct{
	param_name: Uint,
	param_value_size: c.size_t,
	param_value: rawptr,
}
Mutable_Dispatch_Config_KHR :: struct{
	command: Mutable_Command_KHR,
	num_args: Uint,
	num_svm_args: Uint,
	num_exec_infos: Uint,
	work_dim: Uint,
	arg_list: ^Mutable_Dispatch_Arg_KHR,
	arg_svm_list: ^Mutable_Dispatch_Arg_KHR,
	exec_info_list: ^Mutable_Dispatch_Exec_Info_KHR,
	global_work_offset: ^c.size_t,
	global_work_size: ^c.size_t,
	local_work_size: ^c.size_t,
}
Mutable_Dispatch_Asserts_KHR :: Bitfield
Update_Mutable_Commands_KHR_T :: #type proc  (
             command_buffer: Command_Buffer_KHR,
             num_configs: Uint,
             config_types: ^Command_Buffer_Update_Type_KHR,
             configs: ^rawptr) -> Int
Update_Mutable_Commands_KHR_Fn :: ^Update_Mutable_Commands_KHR_T
Get_Mutable_Command_Info_KHR_T :: #type proc  (
             command: Mutable_Command_KHR,
             param_name: Mutable_Command_Info_KHR,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Mutable_Command_Info_KHR_Fn :: ^Get_Mutable_Command_Info_KHR_T
Set_Mem_Object_Destructor_A_P_P_L_E_T :: #type proc  (
             memobj: Mem,
             pfn_notify: #type proc "stdcall" (memobj: Mem, user_data: rawptr),
             user_data: rawptr) -> Int
Set_Mem_Object_Destructor_A_P_P_L_E_Fn :: ^Set_Mem_Object_Destructor_A_P_P_L_E_T
Log_Messages_To_System_Log_A_P_P_L_E_T :: #type proc  (errstr: cstring, private_info: rawptr, cb: c.size_t, user_data: rawptr)
Log_Messages_To_System_Log_A_P_P_L_E_Fn :: ^Log_Messages_To_System_Log_A_P_P_L_E_T
Log_Messages_To_Stdout_A_P_P_L_E_T :: #type proc  (errstr: cstring, private_info: rawptr, cb: c.size_t, user_data: rawptr)
Log_Messages_To_Stdout_A_P_P_L_E_Fn :: ^Log_Messages_To_Stdout_A_P_P_L_E_T
Log_Messages_To_Stderr_A_P_P_L_E_T :: #type proc  (errstr: cstring, private_info: rawptr, cb: c.size_t, user_data: rawptr)
Log_Messages_To_Stderr_A_P_P_L_E_Fn :: ^Log_Messages_To_Stderr_A_P_P_L_E_T
ICD_Get_Platform_I_Ds_KHR_T :: #type proc  (num_entries: Uint, platforms: ^Platform_ID, num_platforms: ^Uint) -> Int
ICD_Get_Platform_I_Ds_KHR_Fn :: ^ICD_Get_Platform_I_Ds_KHR_T
Create_Program_With_IL_KHR_T :: #type proc  (_context: Context, il: rawptr, length: c.size_t, errcode_ret: ^Int) -> Program
Create_Program_With_IL_KHR_Fn :: ^Create_Program_With_IL_KHR_T
Context_Memory_Initialize_KHR :: Bitfield
Device_Terminate_Capability_KHR :: Bitfield
Terminate_Context_KHR_T :: #type proc  (_context: Context) -> Int
Terminate_Context_KHR_Fn :: ^Terminate_Context_KHR_T
Queue_Properties_KHR :: Properties
Create_Command_Queue_With_Properties_KHR_T :: #type proc  (
             _context: Context,
             device: Device_ID,
             properties: ^Queue_Properties_KHR,
             errcode_ret: ^Int) -> Command_Queue
Create_Command_Queue_With_Properties_KHR_Fn :: ^Create_Command_Queue_With_Properties_KHR_T
Device_Partition_Property_EXT :: Ulong
Release_Device_EXT_T :: #type proc  (device: Device_ID) -> Int
Release_Device_EXT_Fn :: ^Release_Device_EXT_T
Retain_Device_EXT_T :: #type proc  (device: Device_ID) -> Int
Retain_Device_EXT_Fn :: ^Retain_Device_EXT_T
Create_Sub_Devices_EXT_T :: #type proc  (
             in_device: Device_ID,
             properties: ^Device_Partition_Property_EXT,
             num_entries: Uint,
             out_devices: ^Device_ID,
             num_devices: ^Uint) -> Int
Create_Sub_Devices_EXT_Fn :: ^Create_Sub_Devices_EXT_T
Mem_Migration_Flags_EXT :: Bitfield
Enqueue_Migrate_Mem_Object_EXT_T :: #type proc  (
             command_queue: Command_Queue,
             num_mem_objects: Uint,
             mem_objects: ^Mem,
             flags: Mem_Migration_Flags_EXT,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Migrate_Mem_Object_EXT_Fn :: ^Enqueue_Migrate_Mem_Object_EXT_T
Image_Pitch_Info_Qcom :: Uint
Mem_EXT_Host_Ptr :: struct{
	allocation_type: Uint,
	host_cache_policy: Uint,
}
Get_Device_Image_Info_Q_C_O_M_T :: #type proc  (
             device: Device_ID,
             image_width: c.size_t,
             image_height: c.size_t,
             image_format: ^Image_Format,
             param_name: Image_Pitch_Info_Qcom,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Device_Image_Info_Q_C_O_M_Fn :: ^Get_Device_Image_Info_Q_C_O_M_T
Mem_Ion_Host_Ptr :: struct{
	ext_host_ptr: Mem_EXT_Host_Ptr,
	ion_filedesc: c.int,
	ion_hostptr: rawptr,
}
Mem_Android_Native_Buffer_Host_Ptr :: struct{
	ext_host_ptr: Mem_EXT_Host_Ptr,
	anb_ptr: rawptr,
}
Enqueue_Acquire_Gralloc_Objects_IMG_T :: #type proc  (
             command_queue: Command_Queue,
             num_objects: Uint,
             mem_objects: ^Mem,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Acquire_Gralloc_Objects_IMG_Fn :: ^Enqueue_Acquire_Gralloc_Objects_IMG_T
Enqueue_Release_Gralloc_Objects_IMG_T :: #type proc  (
             command_queue: Command_Queue,
             num_objects: Uint,
             mem_objects: ^Mem,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Release_Gralloc_Objects_IMG_Fn :: ^Enqueue_Release_Gralloc_Objects_IMG_T
Mipmap_Filter_Mode_IMG :: Uint
Enqueue_Generate_Mipmap_IMG_T :: #type proc  (
             command_queue: Command_Queue,
             src_image: Mem,
             dst_image: Mem,
             mipmap_filter_mode: Mipmap_Filter_Mode_IMG,
             array_region: ^c.size_t,
             mip_region: ^c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Generate_Mipmap_IMG_Fn :: ^Enqueue_Generate_Mipmap_IMG_T
Get_Kernel_Sub_Group_Info_KHR_T :: #type proc  (
             in_kernel: Kernel,
             in_device: Device_ID,
             param_name: Kernel_Sub_Group_Info,
             input_value_size: c.size_t,
             input_value: rawptr,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Kernel_Sub_Group_Info_KHR_Fn :: ^Get_Kernel_Sub_Group_Info_KHR_T
Queue_Priority_KHR :: Uint
Queue_Throttle_KHR :: Uint
Version_KHR :: Uint
Name_Version_KHR :: struct{
	version: Version_KHR,
	name: [64]c.schar,
}
Device_Pci_Bus_Info_KHR :: struct{
	pci_domain: Uint,
	pci_bus: Uint,
	pci_device: Uint,
	pci_function: Uint,
}
Get_Kernel_Suggested_Local_Work_Size_KHR_T :: #type proc  (
             command_queue: Command_Queue,
             kernel: Kernel,
             work_dim: Uint,
             global_work_offset: ^c.size_t,
             global_work_size: ^c.size_t,
             suggested_local_work_size: ^c.size_t) -> Int
Get_Kernel_Suggested_Local_Work_Size_KHR_Fn :: ^Get_Kernel_Suggested_Local_Work_Size_KHR_T
Device_Integer_Dot_Product_Capabilities_KHR :: Bitfield
Device_Integer_Dot_Product_Acceleration_Properties_KHR :: struct{
	signed_accelerated: Bool,
	unsigned_accelerated: Bool,
	mixed_signedness_accelerated: Bool,
	accumulating_saturating_signed_accelerated: Bool,
	accumulating_saturating_unsigned_accelerated: Bool,
	accumulating_saturating_mixed_signedness_accelerated: Bool,
}
External_Memory_Handle_Type_KHR :: Uint
Enqueue_Acquire_External_Mem_Objects_KHR_T :: #type proc  (
             command_queue: Command_Queue,
             num_mem_objects: Uint,
             mem_objects: ^Mem,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Acquire_External_Mem_Objects_KHR_Fn :: ^Enqueue_Acquire_External_Mem_Objects_KHR_T
Enqueue_Release_External_Mem_Objects_KHR_T :: #type proc  (
             command_queue: Command_Queue,
             num_mem_objects: Uint,
             mem_objects: ^Mem,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Release_External_Mem_Objects_KHR_Fn :: ^Enqueue_Release_External_Mem_Objects_KHR_T
Semaphore_KHR :: distinct rawptr
External_Semaphore_Handle_Type_KHR :: Uint
Get_Semaphore_Handle_For_Type_KHR_T :: #type proc  (
             sema_object: Semaphore_KHR,
             device: Device_ID,
             handle_type: External_Semaphore_Handle_Type_KHR,
             handle_size: c.size_t,
             handle_ptr: rawptr,
             handle_size_ret: ^c.size_t) -> Int
Get_Semaphore_Handle_For_Type_KHR_Fn :: ^Get_Semaphore_Handle_For_Type_KHR_T
Semaphore_Reimport_Properties_KHR :: Properties
Re_Import_Semaphore_Sync_Fd_KHR_T :: #type proc  (
             sema_object: Semaphore_KHR,
             reimport_props: ^Semaphore_Reimport_Properties_KHR,
             fd: c.int) -> Int
Re_Import_Semaphore_Sync_Fd_KHR_Fn :: ^Re_Import_Semaphore_Sync_Fd_KHR_T
Semaphore_Properties_KHR :: Properties
Semaphore_Info_KHR :: Uint
Semaphore_Type_KHR :: Uint
Semaphore_Payload_KHR :: Ulong
Create_Semaphore_With_Properties_KHR_T :: #type proc  (
             _context: Context,
             sema_props: ^Semaphore_Properties_KHR,
             errcode_ret: ^Int) -> Semaphore_KHR
Create_Semaphore_With_Properties_KHR_Fn :: ^Create_Semaphore_With_Properties_KHR_T
Enqueue_Wait_Semaphores_KHR_T :: #type proc  (
             command_queue: Command_Queue,
             num_sema_objects: Uint,
             sema_objects: ^Semaphore_KHR,
             sema_payload_list: ^Semaphore_Payload_KHR,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Wait_Semaphores_KHR_Fn :: ^Enqueue_Wait_Semaphores_KHR_T
Enqueue_Signal_Semaphores_KHR_T :: #type proc  (
             command_queue: Command_Queue,
             num_sema_objects: Uint,
             sema_objects: ^Semaphore_KHR,
             sema_payload_list: ^Semaphore_Payload_KHR,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Signal_Semaphores_KHR_Fn :: ^Enqueue_Signal_Semaphores_KHR_T
Get_Semaphore_Info_KHR_T :: #type proc  (
             sema_object: Semaphore_KHR,
             param_name: Semaphore_Info_KHR,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Semaphore_Info_KHR_Fn :: ^Get_Semaphore_Info_KHR_T
Release_Semaphore_KHR_T :: #type proc  (sema_object: Semaphore_KHR) -> Int
Release_Semaphore_KHR_Fn :: ^Release_Semaphore_KHR_T
Retain_Semaphore_KHR_T :: #type proc  (sema_object: Semaphore_KHR) -> Int
Retain_Semaphore_KHR_Fn :: ^Retain_Semaphore_KHR_T
Import_Properties_ARM :: c.intptr_t
Import_Memory_ARM_T :: #type proc  (
             _context: Context,
             flags: Mem_Flags,
             properties: ^Import_Properties_ARM,
             memory: rawptr,
             size: c.size_t,
             errcode_ret: ^Int) -> Mem
Import_Memory_ARM_Fn :: ^Import_Memory_ARM_T
SVM_Mem_Flags_ARM :: Bitfield
Kernel_Exec_Info_ARM :: Uint
Device_SVM_Capabilities_ARM :: Bitfield
SVM_Alloc_ARM_T :: #type proc  (_context: Context, flags: SVM_Mem_Flags_ARM, size: c.size_t, alignment: Uint) -> rawptr
SVM_Alloc_ARM_Fn :: ^SVM_Alloc_ARM_T
SVM_Free_ARM_T :: #type proc  (_context: Context, svm_pointer: rawptr)
SVM_Free_ARM_Fn :: ^SVM_Free_ARM_T
Enqueue_SVM_Free_ARM_T :: #type proc  (
             command_queue: Command_Queue,
             num_svm_pointers: Uint,
             svm_pointers: []rawptr,
             pfn_free_func: #type proc "stdcall" (queue: Command_Queue, num_svm_pointers: Uint, svm_pointers: []rawptr, user_data: rawptr),
             user_data: rawptr,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_SVM_Free_ARM_Fn :: ^Enqueue_SVM_Free_ARM_T
Enqueue_SVM_Memcpy_ARM_T :: #type proc  (
             command_queue: Command_Queue,
             blocking_copy: Bool,
             dst_ptr: rawptr,
             src_ptr: rawptr,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_SVM_Memcpy_ARM_Fn :: ^Enqueue_SVM_Memcpy_ARM_T
Enqueue_SVM_Mem_Fill_ARM_T :: #type proc  (
             command_queue: Command_Queue,
             svm_ptr: rawptr,
             pattern: rawptr,
             pattern_size: c.size_t,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_SVM_Mem_Fill_ARM_Fn :: ^Enqueue_SVM_Mem_Fill_ARM_T
Enqueue_SVM_Map_ARM_T :: #type proc  (
             command_queue: Command_Queue,
             blocking_map: Bool,
             flags: Map_Flags,
             svm_ptr: rawptr,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_SVM_Map_ARM_Fn :: ^Enqueue_SVM_Map_ARM_T
Enqueue_SVM_Unmap_ARM_T :: #type proc  (
             command_queue: Command_Queue,
             svm_ptr: rawptr,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_SVM_Unmap_ARM_Fn :: ^Enqueue_SVM_Unmap_ARM_T
Set_Kernel_Arg_SVM_Pointer_ARM_T :: #type proc  (kernel: Kernel, arg_index: Uint, arg_value: rawptr) -> Int
Set_Kernel_Arg_SVM_Pointer_ARM_Fn :: ^Set_Kernel_Arg_SVM_Pointer_ARM_T
Set_Kernel_Exec_Info_ARM_T :: #type proc  (
             kernel: Kernel,
             param_name: Kernel_Exec_Info_ARM,
             param_value_size: c.size_t,
             param_value: rawptr) -> Int
Set_Kernel_Exec_Info_ARM_Fn :: ^Set_Kernel_Exec_Info_ARM_T
Device_Scheduling_Controls_Capabilities_ARM :: Bitfield
Device_Controlled_Termination_Capabilities_ARM :: Bitfield
Device_Feature_Capabilities_INTEL :: Bitfield
Accelerator_INTEL :: distinct rawptr
Accelerator_Type_INTEL :: Uint
Accelerator_Info_INTEL :: Uint
Create_Accelerator_INTEL_T :: #type proc  (
             _context: Context,
             accelerator_type: Accelerator_Type_INTEL,
             descriptor_size: c.size_t,
             descriptor: rawptr,
             errcode_ret: ^Int) -> Accelerator_INTEL
Create_Accelerator_INTEL_Fn :: ^Create_Accelerator_INTEL_T
Get_Accelerator_Info_INTEL_T :: #type proc  (
             accelerator: Accelerator_INTEL,
             param_name: Accelerator_Info_INTEL,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Accelerator_Info_INTEL_Fn :: ^Get_Accelerator_Info_INTEL_T
Retain_Accelerator_INTEL_T :: #type proc  (accelerator: Accelerator_INTEL) -> Int
Retain_Accelerator_INTEL_Fn :: ^Retain_Accelerator_INTEL_T
Release_Accelerator_INTEL_T :: #type proc  (accelerator: Accelerator_INTEL) -> Int
Release_Accelerator_INTEL_Fn :: ^Release_Accelerator_INTEL_T
Motion_Estimation_Desc_INTEL :: struct{
	mb_block_type: Uint,
	subpixel_mode: Uint,
	sad_adjust_mode: Uint,
	search_path_type: Uint,
}
Diagnostic_Verbose_Level_INTEL :: Bitfield
Device_Unified_Shared_Memory_Capabilities_INTEL :: Bitfield
Mem_Properties_INTEL :: Properties
Mem_Alloc_Flags_INTEL :: Bitfield
Mem_Info_INTEL :: Uint
Unified_Shared_Memory_Type_INTEL :: Uint
Mem_Advice_INTEL :: Uint
Host_Mem_Alloc_INTEL_T :: #type proc  (
             _context: Context,
             properties: ^Mem_Properties_INTEL,
             size: c.size_t,
             alignment: Uint,
             errcode_ret: ^Int) -> rawptr
Host_Mem_Alloc_INTEL_Fn :: ^Host_Mem_Alloc_INTEL_T
Device_Mem_Alloc_INTEL_T :: #type proc  (
             _context: Context,
             device: Device_ID,
             properties: ^Mem_Properties_INTEL,
             size: c.size_t,
             alignment: Uint,
             errcode_ret: ^Int) -> rawptr
Device_Mem_Alloc_INTEL_Fn :: ^Device_Mem_Alloc_INTEL_T
Shared_Mem_Alloc_INTEL_T :: #type proc  (
             _context: Context,
             device: Device_ID,
             properties: ^Mem_Properties_INTEL,
             size: c.size_t,
             alignment: Uint,
             errcode_ret: ^Int) -> rawptr
Shared_Mem_Alloc_INTEL_Fn :: ^Shared_Mem_Alloc_INTEL_T
Mem_Free_INTEL_T :: #type proc  (_context: Context, ptr: rawptr) -> Int
Mem_Free_INTEL_Fn :: ^Mem_Free_INTEL_T
Mem_Blocking_Free_INTEL_T :: #type proc  (_context: Context, ptr: rawptr) -> Int
Mem_Blocking_Free_INTEL_Fn :: ^Mem_Blocking_Free_INTEL_T
Get_Mem_Alloc_Info_INTEL_T :: #type proc  (
             _context: Context,
             ptr: rawptr,
             param_name: Mem_Info_INTEL,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Mem_Alloc_Info_INTEL_Fn :: ^Get_Mem_Alloc_Info_INTEL_T
Set_Kernel_Arg_Mem_Pointer_INTEL_T :: #type proc  (kernel: Kernel, arg_index: Uint, arg_value: rawptr) -> Int
Set_Kernel_Arg_Mem_Pointer_INTEL_Fn :: ^Set_Kernel_Arg_Mem_Pointer_INTEL_T
Enqueue_Mem_Fill_INTEL_T :: #type proc  (
             command_queue: Command_Queue,
             dst_ptr: rawptr,
             pattern: rawptr,
             pattern_size: c.size_t,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Mem_Fill_INTEL_Fn :: ^Enqueue_Mem_Fill_INTEL_T
Enqueue_Memcpy_INTEL_T :: #type proc  (
             command_queue: Command_Queue,
             blocking: Bool,
             dst_ptr: rawptr,
             src_ptr: rawptr,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Memcpy_INTEL_Fn :: ^Enqueue_Memcpy_INTEL_T
Enqueue_Mem_Advise_INTEL_T :: #type proc  (
             command_queue: Command_Queue,
             ptr: rawptr,
             size: c.size_t,
             advice: Mem_Advice_INTEL,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Mem_Advise_INTEL_Fn :: ^Enqueue_Mem_Advise_INTEL_T
Enqueue_Migrate_Mem_INTEL_T :: #type proc  (
             command_queue: Command_Queue,
             ptr: rawptr,
             size: c.size_t,
             flags: Mem_Migration_Flags,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Migrate_Mem_INTEL_Fn :: ^Enqueue_Migrate_Mem_INTEL_T
Enqueue_Memset_INTEL_T :: #type proc  (
             command_queue: Command_Queue,
             dst_ptr: rawptr,
             value: Int,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Memset_INTEL_Fn :: ^Enqueue_Memset_INTEL_T
Create_Buffer_With_Properties_INTEL_T :: #type proc  (
             _context: Context,
             properties: ^Mem_Properties_INTEL,
             flags: Mem_Flags,
             size: c.size_t,
             host_ptr: rawptr,
             errcode_ret: ^Int) -> Mem
Create_Buffer_With_Properties_INTEL_Fn :: ^Create_Buffer_With_Properties_INTEL_T
Enqueue_Read_Host_Pipe_INTEL_T :: #type proc  (
             command_queue: Command_Queue,
             program: Program,
             pipe_symbol: cstring,
             blocking_read: Bool,
             ptr: rawptr,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Read_Host_Pipe_INTEL_Fn :: ^Enqueue_Read_Host_Pipe_INTEL_T
Enqueue_Write_Host_Pipe_INTEL_T :: #type proc  (
             command_queue: Command_Queue,
             program: Program,
             pipe_symbol: cstring,
             blocking_write: Bool,
             ptr: rawptr,
             size: c.size_t,
             num_events_in_wait_list: Uint,
             event_wait_list: ^Event,
             event: ^Event) -> Int
Enqueue_Write_Host_Pipe_INTEL_Fn :: ^Enqueue_Write_Host_Pipe_INTEL_T
Command_Queue_Capabilities_INTEL :: Bitfield
Queue_Family_Properties_INTEL :: struct{
	properties: Command_Queue_Properties,
	capabilities: Command_Queue_Capabilities_INTEL,
	count: Uint,
	name: [64]c.schar,
}
Image_Requirements_Info_EXT :: Uint
Get_Image_Requirements_Info_EXT_T :: #type proc  (
             _context: Context,
             properties: ^Mem_Properties,
             flags: Mem_Flags,
             image_format: ^Image_Format,
             image_desc: ^Image_Desc,
             param_name: Image_Requirements_Info_EXT,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_Image_Requirements_Info_EXT_Fn :: ^Get_Image_Requirements_Info_EXT_T
Icdl_Info :: Uint
Get_ICD_Loader_Info_O_CL_ICD_T :: #type proc  (
             param_name: Icdl_Info,
             param_value_size: c.size_t,
             param_value: rawptr,
             param_value_size_ret: ^c.size_t) -> Int
Get_ICD_Loader_Info_O_CL_ICD_Fn :: ^Get_ICD_Loader_Info_O_CL_ICD_T
Device_Fp_Atomic_Capabilities_EXT :: Bitfield
Set_Content_Size_Buffer_Po_CL_T :: #type proc  (buffer: Mem, content_size_buffer: Mem) -> Int
Set_Content_Size_Buffer_Po_CL_Fn :: ^Set_Content_Size_Buffer_Po_CL_T
Device_Kernel_Clock_Capabilities_KHR :: Bitfield
Cancel_Commands_IMG_T :: #type proc  (event_list: ^Event, num_events_in_list: c.size_t) -> Int
Cancel_Commands_IMG_Fn :: ^Cancel_Commands_IMG_T

@(link_prefix="cl")
foreign opencl {
	CreateCommandBufferKHR :: proc  (
                                 num_queues: Uint,
                                 queues: ^Command_Queue,
                                 properties: ^Command_Buffer_Properties_KHR,
                                 errcode_ret: ^Int) -> Command_Buffer_KHR ---
	FinalizeCommandBufferKHR :: proc  (command_buffer: Command_Buffer_KHR) -> Int ---
	RetainCommandBufferKHR :: proc  (command_buffer: Command_Buffer_KHR) -> Int ---
	ReleaseCommandBufferKHR :: proc  (command_buffer: Command_Buffer_KHR) -> Int ---
	EnqueueCommandBufferKHR :: proc  (
                                  num_queues: Uint,
                                  queues: ^Command_Queue,
                                  command_buffer: Command_Buffer_KHR,
                                  num_events_in_wait_list: Uint,
                                  event_wait_list: ^Event,
                                  event: ^Event) -> Int ---
	CommandBarrierWithWaitListKHR :: proc  (
                                        command_buffer: Command_Buffer_KHR,
                                        command_queue: Command_Queue,
                                        properties: ^Command_Properties_KHR,
                                        num_sync_points_in_wait_list: Uint,
                                        sync_point_wait_list: ^Sync_Point_KHR,
                                        sync_point: ^Sync_Point_KHR,
                                        mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandCopyBufferKHR :: proc  (
                               command_buffer: Command_Buffer_KHR,
                               command_queue: Command_Queue,
                               properties: ^Command_Properties_KHR,
                               src_buffer: Mem,
                               dst_buffer: Mem,
                               src_offset: c.size_t,
                               dst_offset: c.size_t,
                               size: c.size_t,
                               num_sync_points_in_wait_list: Uint,
                               sync_point_wait_list: ^Sync_Point_KHR,
                               sync_point: ^Sync_Point_KHR,
                               mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandCopyBufferRectKHR :: proc  (
                                   command_buffer: Command_Buffer_KHR,
                                   command_queue: Command_Queue,
                                   properties: ^Command_Properties_KHR,
                                   src_buffer: Mem,
                                   dst_buffer: Mem,
                                   src_origin: ^c.size_t,
                                   dst_origin: ^c.size_t,
                                   region: ^c.size_t,
                                   src_row_pitch: c.size_t,
                                   src_slice_pitch: c.size_t,
                                   dst_row_pitch: c.size_t,
                                   dst_slice_pitch: c.size_t,
                                   num_sync_points_in_wait_list: Uint,
                                   sync_point_wait_list: ^Sync_Point_KHR,
                                   sync_point: ^Sync_Point_KHR,
                                   mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandCopyBufferToImageKHR :: proc  (
                                      command_buffer: Command_Buffer_KHR,
                                      command_queue: Command_Queue,
                                      properties: ^Command_Properties_KHR,
                                      src_buffer: Mem,
                                      dst_image: Mem,
                                      src_offset: c.size_t,
                                      dst_origin: ^c.size_t,
                                      region: ^c.size_t,
                                      num_sync_points_in_wait_list: Uint,
                                      sync_point_wait_list: ^Sync_Point_KHR,
                                      sync_point: ^Sync_Point_KHR,
                                      mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandCopyImageKHR :: proc  (
                              command_buffer: Command_Buffer_KHR,
                              command_queue: Command_Queue,
                              properties: ^Command_Properties_KHR,
                              src_image: Mem,
                              dst_image: Mem,
                              src_origin: ^c.size_t,
                              dst_origin: ^c.size_t,
                              region: ^c.size_t,
                              num_sync_points_in_wait_list: Uint,
                              sync_point_wait_list: ^Sync_Point_KHR,
                              sync_point: ^Sync_Point_KHR,
                              mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandCopyImageToBufferKHR :: proc  (
                                      command_buffer: Command_Buffer_KHR,
                                      command_queue: Command_Queue,
                                      properties: ^Command_Properties_KHR,
                                      src_image: Mem,
                                      dst_buffer: Mem,
                                      src_origin: ^c.size_t,
                                      region: ^c.size_t,
                                      dst_offset: c.size_t,
                                      num_sync_points_in_wait_list: Uint,
                                      sync_point_wait_list: ^Sync_Point_KHR,
                                      sync_point: ^Sync_Point_KHR,
                                      mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandFillBufferKHR :: proc  (
                               command_buffer: Command_Buffer_KHR,
                               command_queue: Command_Queue,
                               properties: ^Command_Properties_KHR,
                               buffer: Mem,
                               pattern: rawptr,
                               pattern_size: c.size_t,
                               offset: c.size_t,
                               size: c.size_t,
                               num_sync_points_in_wait_list: Uint,
                               sync_point_wait_list: ^Sync_Point_KHR,
                               sync_point: ^Sync_Point_KHR,
                               mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandFillImageKHR :: proc  (
                              command_buffer: Command_Buffer_KHR,
                              command_queue: Command_Queue,
                              properties: ^Command_Properties_KHR,
                              image: Mem,
                              fill_color: rawptr,
                              origin: ^c.size_t,
                              region: ^c.size_t,
                              num_sync_points_in_wait_list: Uint,
                              sync_point_wait_list: ^Sync_Point_KHR,
                              sync_point: ^Sync_Point_KHR,
                              mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandNDRangeKernelKHR :: proc  (
                                  command_buffer: Command_Buffer_KHR,
                                  command_queue: Command_Queue,
                                  properties: ^Command_Properties_KHR,
                                  kernel: Kernel,
                                  work_dim: Uint,
                                  global_work_offset: ^c.size_t,
                                  global_work_size: ^c.size_t,
                                  local_work_size: ^c.size_t,
                                  num_sync_points_in_wait_list: Uint,
                                  sync_point_wait_list: ^Sync_Point_KHR,
                                  sync_point: ^Sync_Point_KHR,
                                  mutable_handle: ^Mutable_Command_KHR) -> Int ---
	GetCommandBufferInfoKHR :: proc  (
                                  command_buffer: Command_Buffer_KHR,
                                  param_name: Command_Buffer_Info_KHR,
                                  param_value_size: c.size_t,
                                  param_value: rawptr,
                                  param_value_size_ret: ^c.size_t) -> Int ---
	CommandSVMMemcpyKHR :: proc  (
                              command_buffer: Command_Buffer_KHR,
                              command_queue: Command_Queue,
                              properties: ^Command_Properties_KHR,
                              dst_ptr: rawptr,
                              src_ptr: rawptr,
                              size: c.size_t,
                              num_sync_points_in_wait_list: Uint,
                              sync_point_wait_list: ^Sync_Point_KHR,
                              sync_point: ^Sync_Point_KHR,
                              mutable_handle: ^Mutable_Command_KHR) -> Int ---
	CommandSVMMemFillKHR :: proc  (
                               command_buffer: Command_Buffer_KHR,
                               command_queue: Command_Queue,
                               properties: ^Command_Properties_KHR,
                               svm_ptr: rawptr,
                               pattern: rawptr,
                               pattern_size: c.size_t,
                               size: c.size_t,
                               num_sync_points_in_wait_list: Uint,
                               sync_point_wait_list: ^Sync_Point_KHR,
                               sync_point: ^Sync_Point_KHR,
                               mutable_handle: ^Mutable_Command_KHR) -> Int ---
	RemapCommandBufferKHR :: proc  (
                                command_buffer: Command_Buffer_KHR,
                                automatic: Bool,
                                num_queues: Uint,
                                queues: ^Command_Queue,
                                num_handles: Uint,
                                handles: ^Mutable_Command_KHR,
                                handles_ret: ^Mutable_Command_KHR,
                                errcode_ret: ^Int) -> Command_Buffer_KHR ---
	UpdateMutableCommandsKHR :: proc  (
                                   command_buffer: Command_Buffer_KHR,
                                   num_configs: Uint,
                                   config_types: ^Command_Buffer_Update_Type_KHR,
                                   configs: ^rawptr) -> Int ---
	GetMutableCommandInfoKHR :: proc  (
                                   command: Mutable_Command_KHR,
                                   param_name: Mutable_Command_Info_KHR,
                                   param_value_size: c.size_t,
                                   param_value: rawptr,
                                   param_value_size_ret: ^c.size_t) -> Int ---
	SetMemObjectDestructorAPPLE :: proc  (
                                      memobj: Mem,
                                      pfn_notify: #type proc "stdcall" (memobj: Mem, user_data: rawptr),
                                      user_data: rawptr) -> Int ---
	LogMessagesToSystemLogAPPLE :: proc  (
                                      errstr: cstring,
                                      private_info: rawptr,
                                      cb: c.size_t,
                                      user_data: rawptr) ---
	LogMessagesToStdoutAPPLE :: proc  (
                                   errstr: cstring,
                                   private_info: rawptr,
                                   cb: c.size_t,
                                   user_data: rawptr) ---
	LogMessagesToStderrAPPLE :: proc  (
                                   errstr: cstring,
                                   private_info: rawptr,
                                   cb: c.size_t,
                                   user_data: rawptr) ---
	IcdGetPlatformIDsKHR :: proc  (
                               num_entries: Uint,
                               platforms: ^Platform_ID,
                               num_platforms: ^Uint) -> Int ---
	CreateProgramWithILKHR :: proc  (
                                 _context: Context,
                                 il: rawptr,
                                 length: c.size_t,
                                 errcode_ret: ^Int) -> Program ---
	TerminateContextKHR :: proc  (_context: Context) -> Int ---
	CreateCommandQueueWithPropertiesKHR :: proc  (
                                              _context: Context,
                                              device: Device_ID,
                                              properties: ^Queue_Properties_KHR,
                                              errcode_ret: ^Int) -> Command_Queue ---
	ReleaseDeviceEXT :: proc  (device: Device_ID) -> Int ---
	RetainDeviceEXT :: proc  (device: Device_ID) -> Int ---
	CreateSubDevicesEXT :: proc  (
                              in_device: Device_ID,
                              properties: ^Device_Partition_Property_EXT,
                              num_entries: Uint,
                              out_devices: ^Device_ID,
                              num_devices: ^Uint) -> Int ---
	EnqueueMigrateMemObjectEXT :: proc  (
                                     command_queue: Command_Queue,
                                     num_mem_objects: Uint,
                                     mem_objects: ^Mem,
                                     flags: Mem_Migration_Flags_EXT,
                                     num_events_in_wait_list: Uint,
                                     event_wait_list: ^Event,
                                     event: ^Event) -> Int ---
	GetDeviceImageInfoQCOM :: proc  (
                                 device: Device_ID,
                                 image_width: c.size_t,
                                 image_height: c.size_t,
                                 image_format: ^Image_Format,
                                 param_name: Image_Pitch_Info_Qcom,
                                 param_value_size: c.size_t,
                                 param_value: rawptr,
                                 param_value_size_ret: ^c.size_t) -> Int ---
	EnqueueAcquireGrallocObjectsIMG :: proc  (
                                          command_queue: Command_Queue,
                                          num_objects: Uint,
                                          mem_objects: ^Mem,
                                          num_events_in_wait_list: Uint,
                                          event_wait_list: ^Event,
                                          event: ^Event) -> Int ---
	EnqueueReleaseGrallocObjectsIMG :: proc  (
                                          command_queue: Command_Queue,
                                          num_objects: Uint,
                                          mem_objects: ^Mem,
                                          num_events_in_wait_list: Uint,
                                          event_wait_list: ^Event,
                                          event: ^Event) -> Int ---
	EnqueueGenerateMipmapIMG :: proc  (
                                   command_queue: Command_Queue,
                                   src_image: Mem,
                                   dst_image: Mem,
                                   mipmap_filter_mode: Mipmap_Filter_Mode_IMG,
                                   array_region: ^c.size_t,
                                   mip_region: ^c.size_t,
                                   num_events_in_wait_list: Uint,
                                   event_wait_list: ^Event,
                                   event: ^Event) -> Int ---
	GetKernelSubGroupInfoKHR :: proc  (
                                   in_kernel: Kernel,
                                   in_device: Device_ID,
                                   param_name: Kernel_Sub_Group_Info,
                                   input_value_size: c.size_t,
                                   input_value: rawptr,
                                   param_value_size: c.size_t,
                                   param_value: rawptr,
                                   param_value_size_ret: ^c.size_t) -> Int ---
	GetKernelSuggestedLocalWorkSizeKHR :: proc  (
                                             command_queue: Command_Queue,
                                             kernel: Kernel,
                                             work_dim: Uint,
                                             global_work_offset: ^c.size_t,
                                             global_work_size: ^c.size_t,
                                             suggested_local_work_size: ^c.size_t) -> Int ---
	EnqueueAcquireExternalMemObjectsKHR :: proc  (
                                              command_queue: Command_Queue,
                                              num_mem_objects: Uint,
                                              mem_objects: ^Mem,
                                              num_events_in_wait_list: Uint,
                                              event_wait_list: ^Event,
                                              event: ^Event) -> Int ---
	EnqueueReleaseExternalMemObjectsKHR :: proc  (
                                              command_queue: Command_Queue,
                                              num_mem_objects: Uint,
                                              mem_objects: ^Mem,
                                              num_events_in_wait_list: Uint,
                                              event_wait_list: ^Event,
                                              event: ^Event) -> Int ---
	GetSemaphoreHandleForTypeKHR :: proc  (
                                       sema_object: Semaphore_KHR,
                                       device: Device_ID,
                                       handle_type: External_Semaphore_Handle_Type_KHR,
                                       handle_size: c.size_t,
                                       handle_ptr: rawptr,
                                       handle_size_ret: ^c.size_t) -> Int ---
	ReImportSemaphoreSyncFdKHR :: proc  (
                                     sema_object: Semaphore_KHR,
                                     reimport_props: ^Semaphore_Reimport_Properties_KHR,
                                     fd: c.int) -> Int ---
	CreateSemaphoreWithPropertiesKHR :: proc  (
                                           _context: Context,
                                           sema_props: ^Semaphore_Properties_KHR,
                                           errcode_ret: ^Int) -> Semaphore_KHR ---
	EnqueueWaitSemaphoresKHR :: proc  (
                                   command_queue: Command_Queue,
                                   num_sema_objects: Uint,
                                   sema_objects: ^Semaphore_KHR,
                                   sema_payload_list: ^Semaphore_Payload_KHR,
                                   num_events_in_wait_list: Uint,
                                   event_wait_list: ^Event,
                                   event: ^Event) -> Int ---
	EnqueueSignalSemaphoresKHR :: proc  (
                                     command_queue: Command_Queue,
                                     num_sema_objects: Uint,
                                     sema_objects: ^Semaphore_KHR,
                                     sema_payload_list: ^Semaphore_Payload_KHR,
                                     num_events_in_wait_list: Uint,
                                     event_wait_list: ^Event,
                                     event: ^Event) -> Int ---
	GetSemaphoreInfoKHR :: proc  (
                              sema_object: Semaphore_KHR,
                              param_name: Semaphore_Info_KHR,
                              param_value_size: c.size_t,
                              param_value: rawptr,
                              param_value_size_ret: ^c.size_t) -> Int ---
	ReleaseSemaphoreKHR :: proc  (sema_object: Semaphore_KHR) -> Int ---
	RetainSemaphoreKHR :: proc  (sema_object: Semaphore_KHR) -> Int ---
	ImportMemoryARM :: proc  (
                          _context: Context,
                          flags: Mem_Flags,
                          properties: ^Import_Properties_ARM,
                          memory: rawptr,
                          size: c.size_t,
                          errcode_ret: ^Int) -> Mem ---
	SVMAllocARM :: proc  (
                      _context: Context,
                      flags: SVM_Mem_Flags_ARM,
                      size: c.size_t,
                      alignment: Uint) -> rawptr ---
	SVMFreeARM :: proc  (_context: Context, svm_pointer: rawptr) ---
	EnqueueSVMFreeARM :: proc  (
                            command_queue: Command_Queue,
                            num_svm_pointers: Uint,
                            svm_pointers: []rawptr,
                            pfn_free_func: #type proc "stdcall" (queue: Command_Queue, num_svm_pointers: Uint, svm_pointers: []rawptr, user_data: rawptr),
                            user_data: rawptr,
                            num_events_in_wait_list: Uint,
                            event_wait_list: ^Event,
                            event: ^Event) -> Int ---
	EnqueueSVMMemcpyARM :: proc  (
                              command_queue: Command_Queue,
                              blocking_copy: Bool,
                              dst_ptr: rawptr,
                              src_ptr: rawptr,
                              size: c.size_t,
                              num_events_in_wait_list: Uint,
                              event_wait_list: ^Event,
                              event: ^Event) -> Int ---
	EnqueueSVMMemFillARM :: proc  (
                               command_queue: Command_Queue,
                               svm_ptr: rawptr,
                               pattern: rawptr,
                               pattern_size: c.size_t,
                               size: c.size_t,
                               num_events_in_wait_list: Uint,
                               event_wait_list: ^Event,
                               event: ^Event) -> Int ---
	EnqueueSVMMapARM :: proc  (
                           command_queue: Command_Queue,
                           blocking_map: Bool,
                           flags: Map_Flags,
                           svm_ptr: rawptr,
                           size: c.size_t,
                           num_events_in_wait_list: Uint,
                           event_wait_list: ^Event,
                           event: ^Event) -> Int ---
	EnqueueSVMUnmapARM :: proc  (
                             command_queue: Command_Queue,
                             svm_ptr: rawptr,
                             num_events_in_wait_list: Uint,
                             event_wait_list: ^Event,
                             event: ^Event) -> Int ---
	SetKernelArgSVMPointerARM :: proc  (kernel: Kernel, arg_index: Uint, arg_value: rawptr) -> Int ---
	SetKernelExecInfoARM :: proc  (
                               kernel: Kernel,
                               param_name: Kernel_Exec_Info_ARM,
                               param_value_size: c.size_t,
                               param_value: rawptr) -> Int ---
	CreateAcceleratorINTEL :: proc  (
                                 _context: Context,
                                 accelerator_type: Accelerator_Type_INTEL,
                                 descriptor_size: c.size_t,
                                 descriptor: rawptr,
                                 errcode_ret: ^Int) -> Accelerator_INTEL ---
	GetAcceleratorInfoINTEL :: proc  (
                                  accelerator: Accelerator_INTEL,
                                  param_name: Accelerator_Info_INTEL,
                                  param_value_size: c.size_t,
                                  param_value: rawptr,
                                  param_value_size_ret: ^c.size_t) -> Int ---
	RetainAcceleratorINTEL :: proc  (accelerator: Accelerator_INTEL) -> Int ---
	ReleaseAcceleratorINTEL :: proc  (accelerator: Accelerator_INTEL) -> Int ---
	HostMemAllocINTEL :: proc  (
                            _context: Context,
                            properties: ^Mem_Properties_INTEL,
                            size: c.size_t,
                            alignment: Uint,
                            errcode_ret: ^Int) -> rawptr ---
	DeviceMemAllocINTEL :: proc  (
                              _context: Context,
                              device: Device_ID,
                              properties: ^Mem_Properties_INTEL,
                              size: c.size_t,
                              alignment: Uint,
                              errcode_ret: ^Int) -> rawptr ---
	SharedMemAllocINTEL :: proc  (
                              _context: Context,
                              device: Device_ID,
                              properties: ^Mem_Properties_INTEL,
                              size: c.size_t,
                              alignment: Uint,
                              errcode_ret: ^Int) -> rawptr ---
	MemFreeINTEL :: proc  (_context: Context, ptr: rawptr) -> Int ---
	MemBlockingFreeINTEL :: proc  (_context: Context, ptr: rawptr) -> Int ---
	GetMemAllocInfoINTEL :: proc  (
                               _context: Context,
                               ptr: rawptr,
                               param_name: Mem_Info_INTEL,
                               param_value_size: c.size_t,
                               param_value: rawptr,
                               param_value_size_ret: ^c.size_t) -> Int ---
	SetKernelArgMemPointerINTEL :: proc  (kernel: Kernel, arg_index: Uint, arg_value: rawptr) -> Int ---
	EnqueueMemFillINTEL :: proc  (
                              command_queue: Command_Queue,
                              dst_ptr: rawptr,
                              pattern: rawptr,
                              pattern_size: c.size_t,
                              size: c.size_t,
                              num_events_in_wait_list: Uint,
                              event_wait_list: ^Event,
                              event: ^Event) -> Int ---
	EnqueueMemcpyINTEL :: proc  (
                             command_queue: Command_Queue,
                             blocking: Bool,
                             dst_ptr: rawptr,
                             src_ptr: rawptr,
                             size: c.size_t,
                             num_events_in_wait_list: Uint,
                             event_wait_list: ^Event,
                             event: ^Event) -> Int ---
	EnqueueMemAdviseINTEL :: proc  (
                                command_queue: Command_Queue,
                                ptr: rawptr,
                                size: c.size_t,
                                advice: Mem_Advice_INTEL,
                                num_events_in_wait_list: Uint,
                                event_wait_list: ^Event,
                                event: ^Event) -> Int ---
	EnqueueMigrateMemINTEL :: proc  (
                                 command_queue: Command_Queue,
                                 ptr: rawptr,
                                 size: c.size_t,
                                 flags: Mem_Migration_Flags,
                                 num_events_in_wait_list: Uint,
                                 event_wait_list: ^Event,
                                 event: ^Event) -> Int ---
	EnqueueMemsetINTEL :: proc  (
                             command_queue: Command_Queue,
                             dst_ptr: rawptr,
                             value: Int,
                             size: c.size_t,
                             num_events_in_wait_list: Uint,
                             event_wait_list: ^Event,
                             event: ^Event) -> Int ---
	CreateBufferWithPropertiesINTEL :: proc  (
                                          _context: Context,
                                          properties: ^Mem_Properties_INTEL,
                                          flags: Mem_Flags,
                                          size: c.size_t,
                                          host_ptr: rawptr,
                                          errcode_ret: ^Int) -> Mem ---
	EnqueueReadHostPipeINTEL :: proc  (
                                   command_queue: Command_Queue,
                                   program: Program,
                                   pipe_symbol: cstring,
                                   blocking_read: Bool,
                                   ptr: rawptr,
                                   size: c.size_t,
                                   num_events_in_wait_list: Uint,
                                   event_wait_list: ^Event,
                                   event: ^Event) -> Int ---
	EnqueueWriteHostPipeINTEL :: proc  (
                                    command_queue: Command_Queue,
                                    program: Program,
                                    pipe_symbol: cstring,
                                    blocking_write: Bool,
                                    ptr: rawptr,
                                    size: c.size_t,
                                    num_events_in_wait_list: Uint,
                                    event_wait_list: ^Event,
                                    event: ^Event) -> Int ---
	GetImageRequirementsInfoEXT :: proc  (
                                      _context: Context,
                                      properties: ^Mem_Properties,
                                      flags: Mem_Flags,
                                      image_format: ^Image_Format,
                                      image_desc: ^Image_Desc,
                                      param_name: Image_Requirements_Info_EXT,
                                      param_value_size: c.size_t,
                                      param_value: rawptr,
                                      param_value_size_ret: ^c.size_t) -> Int ---
	GetICDLoaderInfoOCLICD :: proc  (
                                 param_name: Icdl_Info,
                                 param_value_size: c.size_t,
                                 param_value: rawptr,
                                 param_value_size_ret: ^c.size_t) -> Int ---
	SetContentSizeBufferPoCL :: proc  (buffer: Mem, content_size_buffer: Mem) -> Int ---
	CancelCommandsIMG :: proc  (event_list: ^Event, num_events_in_list: c.size_t) -> Int ---
}
